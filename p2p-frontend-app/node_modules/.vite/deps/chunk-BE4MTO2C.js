import {
  require_index2,
  require_multifactorauth,
  require_multifactorauth_shared2,
  require_multitenancy_shared,
  require_sessionClaimValidatorStore2 as require_sessionClaimValidatorStore,
  require_translationContext
} from "./chunk-2LZGK6WB.js";
import {
  require_authRecipe_shared,
  require_cookieHandler,
  require_error,
  require_genericComponentOverrideContext,
  require_multifactorauth_shared,
  require_multitenancy,
  require_normalisedURLDomain,
  require_normalisedURLPath as require_normalisedURLPath2,
  require_oauth2provider,
  require_oauth2provider_shared,
  require_postSuperTokensInitCallbacks2 as require_postSuperTokensInitCallbacks,
  require_recipeModule_shared,
  require_supertokens_web_js,
  require_utils3 as require_utils,
  require_windowHandler
} from "./chunk-CDLFNTOO.js";
import {
  require_normalisedURLPath,
  require_session2 as require_session
} from "./chunk-VTGDAHUI.js";
import {
  require_react_dom
} from "./chunk-HE4GKDYE.js";
import {
  require_jsx_runtime
} from "./chunk-MJNCUEZK.js";
import {
  require_react
} from "./chunk-UGC3UZ7L.js";
import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/supertokens-auth-react/lib/build/session-shared.js
var require_session_shared = __commonJS({
  "node_modules/supertokens-auth-react/lib/build/session-shared.js"(exports) {
    "use strict";
    var genericComponentOverrideContext = require_genericComponentOverrideContext();
    var _a = genericComponentOverrideContext.createGenericComponentsOverrideContext();
    var useContext = _a[0];
    var Provider = _a[1];
    exports.Provider = Provider;
    exports.useContext = useContext;
  }
});

// node_modules/supertokens-auth-react/lib/build/session.js
var require_session2 = __commonJS({
  "node_modules/supertokens-auth-react/lib/build/session.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var genericComponentOverrideContext = require_genericComponentOverrideContext();
    var WebJSSessionRecipe = require_session();
    var componentOverrideContext = require_session_shared();
    var types = require_multifactorauth_shared();
    var uiEntry = require_index2();
    require_supertokens_web_js();
    require_cookieHandler();
    require_postSuperTokensInitCallbacks();
    require_windowHandler();
    require_multitenancy();
    require_utils();
    require_react();
    require_error();
    require_normalisedURLDomain();
    require_normalisedURLPath2();
    require_jsx_runtime();
    require_oauth2provider_shared();
    require_oauth2provider();
    require_recipeModule_shared();
    require_translationContext();
    require_react_dom();
    require_multitenancy_shared();
    require_multifactorauth_shared2();
    require_multifactorauth();
    require_sessionClaimValidatorStore();
    require_authRecipe_shared();
    require_normalisedURLPath();
    var BooleanClaim = (
      /** @class */
      function(_super) {
        genericComponentOverrideContext.__extends(BooleanClaim2, _super);
        function BooleanClaim2(config) {
          var _this = _super.call(this, config) || this;
          var validatorsWithCallbacks = genericComponentOverrideContext.__assign({}, _this.validators);
          var _loop_1 = function(key2) {
            var validator = validatorsWithCallbacks[key2];
            validatorsWithCallbacks[key2] = function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              return genericComponentOverrideContext.__assign(
                genericComponentOverrideContext.__assign({}, validator.apply(void 0, args)),
                {
                  onFailureRedirection: config.onFailureRedirection,
                  showAccessDeniedOnFailure: config.showAccessDeniedOnFailure
                }
              );
            };
          };
          for (var key in validatorsWithCallbacks) {
            _loop_1(key);
          }
          _this.validators = validatorsWithCallbacks;
          return _this;
        }
        return BooleanClaim2;
      }(WebJSSessionRecipe.BooleanClaim)
    );
    var PrimitiveArrayClaim = (
      /** @class */
      function(_super) {
        genericComponentOverrideContext.__extends(PrimitiveArrayClaim2, _super);
        function PrimitiveArrayClaim2(config) {
          var _this = _super.call(this, config) || this;
          var validatorsWithCallbacks = genericComponentOverrideContext.__assign({}, _this.validators);
          var _loop_1 = function(key2) {
            var validator = validatorsWithCallbacks[key2];
            validatorsWithCallbacks[key2] = function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              return genericComponentOverrideContext.__assign(
                genericComponentOverrideContext.__assign({}, validator.apply(void 0, args)),
                {
                  onFailureRedirection: config.onFailureRedirection,
                  showAccessDeniedOnFailure: config.showAccessDeniedOnFailure
                }
              );
            };
          };
          for (var key in validatorsWithCallbacks) {
            _loop_1(key);
          }
          _this.validators = validatorsWithCallbacks;
          return _this;
        }
        return PrimitiveArrayClaim2;
      }(WebJSSessionRecipe.PrimitiveArrayClaim)
    );
    var PrimitiveClaim = (
      /** @class */
      function(_super) {
        genericComponentOverrideContext.__extends(PrimitiveClaim2, _super);
        function PrimitiveClaim2(config) {
          var _this = _super.call(this, config) || this;
          var validatorsWithCallbacks = genericComponentOverrideContext.__assign({}, _this.validators);
          var _loop_1 = function(key2) {
            var validator = validatorsWithCallbacks[key2];
            validatorsWithCallbacks[key2] = function() {
              var args = [];
              for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
              }
              return genericComponentOverrideContext.__assign(
                genericComponentOverrideContext.__assign({}, validator.apply(void 0, args)),
                {
                  onFailureRedirection: config.onFailureRedirection,
                  showAccessDeniedOnFailure: config.showAccessDeniedOnFailure
                }
              );
            };
          };
          for (var key in validatorsWithCallbacks) {
            _loop_1(key);
          }
          _this.validators = validatorsWithCallbacks;
          return _this;
        }
        return PrimitiveClaim2;
      }(WebJSSessionRecipe.PrimitiveClaim)
    );
    var useClaimValue$1 = function(claim) {
      var ctx = uiEntry.useSessionContext();
      if (ctx.loading) {
        return {
          loading: true
        };
      }
      if (ctx.doesSessionExist === false) {
        return {
          loading: false,
          doesSessionExist: false,
          value: void 0
        };
      }
      return {
        loading: false,
        doesSessionExist: true,
        value: claim.getValueFromPayload(ctx.accessTokenPayload)
      };
    };
    var SessionAPIWrapper = (
      /** @class */
      function() {
        function SessionAPIWrapper2() {
        }
        SessionAPIWrapper2.init = function(config) {
          return types.Session.init(config);
        };
        SessionAPIWrapper2.getUserId = function(input) {
          return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
            return genericComponentOverrideContext.__generator(this, function(_a) {
              return [
                2,
                types.Session.getInstanceOrThrow().getUserId({
                  userContext: genericComponentOverrideContext.getNormalisedUserContext(
                    input === null || input === void 0 ? void 0 : input.userContext
                  )
                })
              ];
            });
          });
        };
        SessionAPIWrapper2.getAccessToken = function(input) {
          return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
            return genericComponentOverrideContext.__generator(this, function(_a) {
              return [
                2,
                types.Session.getInstanceOrThrow().getAccessToken({
                  userContext: genericComponentOverrideContext.getNormalisedUserContext(
                    input === null || input === void 0 ? void 0 : input.userContext
                  )
                })
              ];
            });
          });
        };
        SessionAPIWrapper2.getAccessTokenPayloadSecurely = function(input) {
          return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
            return genericComponentOverrideContext.__generator(this, function(_a) {
              return [
                2,
                types.Session.getInstanceOrThrow().getAccessTokenPayloadSecurely({
                  userContext: genericComponentOverrideContext.getNormalisedUserContext(
                    input === null || input === void 0 ? void 0 : input.userContext
                  )
                })
              ];
            });
          });
        };
        SessionAPIWrapper2.attemptRefreshingSession = function() {
          return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
            return genericComponentOverrideContext.__generator(this, function(_a) {
              return [2, types.Session.getInstanceOrThrow().attemptRefreshingSession()];
            });
          });
        };
        SessionAPIWrapper2.doesSessionExist = function(input) {
          return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
            return genericComponentOverrideContext.__generator(this, function(_a) {
              return [
                2,
                types.Session.getInstanceOrThrow().doesSessionExist({
                  userContext: genericComponentOverrideContext.getNormalisedUserContext(
                    input === null || input === void 0 ? void 0 : input.userContext
                  )
                })
              ];
            });
          });
        };
        SessionAPIWrapper2.addAxiosInterceptors = function(axiosInstance, userContext) {
          return types.Session.addAxiosInterceptors(
            axiosInstance,
            genericComponentOverrideContext.getNormalisedUserContext(userContext)
          );
        };
        SessionAPIWrapper2.signOut = function(input) {
          return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
            return genericComponentOverrideContext.__generator(this, function(_a) {
              return [
                2,
                types.Session.getInstanceOrThrow().signOut({
                  userContext: genericComponentOverrideContext.getNormalisedUserContext(
                    input === null || input === void 0 ? void 0 : input.userContext
                  )
                })
              ];
            });
          });
        };
        SessionAPIWrapper2.validateClaims = function(input) {
          return types.Session.getInstanceOrThrow().validateClaims({
            overrideGlobalClaimValidators: input === null || input === void 0 ? void 0 : input.overrideGlobalClaimValidators,
            userContext: genericComponentOverrideContext.getNormalisedUserContext(
              input === null || input === void 0 ? void 0 : input.userContext
            )
          });
        };
        SessionAPIWrapper2.getInvalidClaimsFromResponse = function(input) {
          return types.Session.getInstanceOrThrow().getInvalidClaimsFromResponse(input);
        };
        SessionAPIWrapper2.getClaimValue = function(input) {
          return types.Session.getInstanceOrThrow().getClaimValue({
            claim: input.claim,
            userContext: genericComponentOverrideContext.getNormalisedUserContext(
              input === null || input === void 0 ? void 0 : input.userContext
            )
          });
        };
        SessionAPIWrapper2.useSessionContext = uiEntry.useSessionContext;
        SessionAPIWrapper2.useClaimValue = useClaimValue$1;
        SessionAPIWrapper2.SessionAuth = uiEntry.SessionAuthWrapper;
        SessionAPIWrapper2.ComponentsOverrideProvider = componentOverrideContext.Provider;
        return SessionAPIWrapper2;
      }()
    );
    var useSessionContext = SessionAPIWrapper.useSessionContext;
    var useClaimValue = SessionAPIWrapper.useClaimValue;
    var SessionAuth = SessionAPIWrapper.SessionAuth;
    var init = SessionAPIWrapper.init;
    var getUserId = SessionAPIWrapper.getUserId;
    var getAccessToken = SessionAPIWrapper.getAccessToken;
    var getAccessTokenPayloadSecurely = SessionAPIWrapper.getAccessTokenPayloadSecurely;
    var attemptRefreshingSession = SessionAPIWrapper.attemptRefreshingSession;
    var doesSessionExist = SessionAPIWrapper.doesSessionExist;
    var addAxiosInterceptors = SessionAPIWrapper.addAxiosInterceptors;
    var signOut = SessionAPIWrapper.signOut;
    var validateClaims = SessionAPIWrapper.validateClaims;
    var getInvalidClaimsFromResponse = SessionAPIWrapper.getInvalidClaimsFromResponse;
    var getClaimValue = SessionAPIWrapper.getClaimValue;
    var SessionComponentsOverrideProvider = SessionAPIWrapper.ComponentsOverrideProvider;
    exports.SessionContext = uiEntry.SessionContext;
    exports.BooleanClaim = BooleanClaim;
    exports.PrimitiveArrayClaim = PrimitiveArrayClaim;
    exports.PrimitiveClaim = PrimitiveClaim;
    exports.SessionAuth = SessionAuth;
    exports.SessionComponentsOverrideProvider = SessionComponentsOverrideProvider;
    exports.addAxiosInterceptors = addAxiosInterceptors;
    exports.attemptRefreshingSession = attemptRefreshingSession;
    exports.default = SessionAPIWrapper;
    exports.doesSessionExist = doesSessionExist;
    exports.getAccessToken = getAccessToken;
    exports.getAccessTokenPayloadSecurely = getAccessTokenPayloadSecurely;
    exports.getClaimValue = getClaimValue;
    exports.getInvalidClaimsFromResponse = getInvalidClaimsFromResponse;
    exports.getUserId = getUserId;
    exports.init = init;
    exports.signOut = signOut;
    exports.useClaimValue = useClaimValue;
    exports.useSessionContext = useSessionContext;
    exports.validateClaims = validateClaims;
  }
});

export {
  require_session_shared,
  require_session2 as require_session
};
//# sourceMappingURL=chunk-BE4MTO2C.js.map
