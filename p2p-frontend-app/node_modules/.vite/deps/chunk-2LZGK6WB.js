import {
  require_authRecipe,
  require_authRecipe_shared,
  require_genericComponentOverrideContext,
  require_multifactorauth_shared,
  require_normalisedURLPath as require_normalisedURLPath2,
  require_oauth2provider_shared,
  require_postSuperTokensInitCallbacks,
  require_postSuperTokensInitCallbacks2,
  require_querier,
  require_recipeModule_shared,
  require_utils2,
  require_utils3,
  require_windowHandler
} from "./chunk-CDLFNTOO.js";
import {
  require_build,
  require_normalisedURLPath,
  require_sessionClaimValidatorStore,
  require_utils
} from "./chunk-VTGDAHUI.js";
import {
  require_react_dom
} from "./chunk-HE4GKDYE.js";
import {
  require_jsx_runtime
} from "./chunk-MJNCUEZK.js";
import {
  require_react
} from "./chunk-UGC3UZ7L.js";
import {
  __commonJS
} from "./chunk-G3PMV62Z.js";

// node_modules/supertokens-auth-react/lib/build/translationContext.js
var require_translationContext = __commonJS({
  "node_modules/supertokens-auth-react/lib/build/translationContext.js"(exports) {
    "use strict";
    var genericComponentOverrideContext = require_genericComponentOverrideContext();
    var jsxRuntime = require_jsx_runtime();
    var React = require_react();
    function _interopDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var React__default = _interopDefault(React);
    var errCB = function() {
      throw new Error("Cannot use translation func outside TranslationContext provider.");
    };
    var TranslationContext = React__default.default.createContext({
      translate: errCB
    });
    var useTranslation = function() {
      return React.useContext(TranslationContext).translate;
    };
    var TranslationContextProvider = function(_a) {
      var children = _a.children, defaultLanguage = _a.defaultLanguage, userTranslationFunc = _a.userTranslationFunc, defaultStore = _a.defaultStore, translationControlEventSource = _a.translationControlEventSource;
      var _b = React.useState(defaultStore), translationStore = _b[0], setTranslationStore = _b[1];
      var _c = React.useState(void 0), currentLanguage = _c[0], setCurrentLanguage = _c[1];
      React.useEffect(
        function() {
          function loadLanguageFromCookies() {
            return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
              var cookieLang, cookieLangTemp;
              return genericComponentOverrideContext.__generator(this, function(_a2) {
                switch (_a2.label) {
                  case 0:
                    return [4, genericComponentOverrideContext.getCurrentLanguageFromCookie()];
                  case 1:
                    cookieLang = _a2.sent();
                    cookieLangTemp = cookieLang === null ? defaultLanguage : cookieLang;
                    setCurrentLanguage(function(current) {
                      return current !== void 0 ? current : cookieLangTemp;
                    });
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }
          void loadLanguageFromCookies();
        },
        [defaultLanguage, setCurrentLanguage]
      );
      React.useEffect(function() {
        var changeHandler = function(_eventName, detail) {
          setCurrentLanguage(detail);
        };
        var loadHandler = function(_eventName, detail) {
          setTranslationStore(function(os) {
            return genericComponentOverrideContext.mergeObjects(os, detail);
          });
        };
        translationControlEventSource.on("LanguageChange", changeHandler);
        translationControlEventSource.on("TranslationLoaded", loadHandler);
        return function() {
          translationControlEventSource.off("LanguageChange", changeHandler);
          translationControlEventSource.off("TranslationLoaded", loadHandler);
        };
      });
      var translateFunc = React.useCallback(
        function(key) {
          if (userTranslationFunc !== void 0) {
            return userTranslationFunc(key);
          }
          if (currentLanguage !== void 0) {
            var res = translationStore[currentLanguage] && translationStore[currentLanguage][key];
            var fallback = translationStore[defaultLanguage] && translationStore[defaultLanguage][key];
            if (res === void 0) {
              if (fallback !== void 0) {
                return fallback;
              }
              return key;
            }
            return res;
          }
          throw new Error("Should never come here");
        },
        [translationStore, currentLanguage, defaultLanguage, userTranslationFunc]
      );
      if (currentLanguage === void 0) {
        return null;
      }
      return jsxRuntime.jsx(
        TranslationContext.Provider,
        genericComponentOverrideContext.__assign({ value: { translate: translateFunc } }, { children })
      );
    };
    exports.TranslationContextProvider = TranslationContextProvider;
    exports.useTranslation = useTranslation;
  }
});

// node_modules/supertokens-auth-react/lib/build/multitenancy-shared.js
var require_multitenancy_shared = __commonJS({
  "node_modules/supertokens-auth-react/lib/build/multitenancy-shared.js"(exports) {
    "use strict";
    var genericComponentOverrideContext = require_genericComponentOverrideContext();
    var _a = genericComponentOverrideContext.createGenericComponentsOverrideContext();
    var useContext = _a[0];
    var Provider = _a[1];
    exports.Provider = Provider;
    exports.useContext = useContext;
  }
});

// node_modules/supertokens-web-js/lib/build/recipe/multifactorauth/utils.js
var require_utils4 = __commonJS({
  "node_modules/supertokens-web-js/lib/build/recipe/multifactorauth/utils.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkFactorRequirement = exports.normaliseUserInput = void 0;
    var utils_1 = require_utils2();
    function normaliseUserInput(config) {
      var override = __assign(
        {
          functions: function(originalImplementation) {
            return originalImplementation;
          }
        },
        config.override
      );
      return __assign(__assign({}, (0, utils_1.normaliseAuthRecipe)(config)), { override });
    }
    exports.normaliseUserInput = normaliseUserInput;
    function checkFactorRequirement(req, completedFactors) {
      return {
        id: req,
        isValid: completedFactors[req] !== void 0,
        message: "Not completed"
      };
    }
    exports.checkFactorRequirement = checkFactorRequirement;
  }
});

// node_modules/supertokens-web-js/lib/build/recipe/multifactorauth/multiFactorAuthClaim.js
var require_multiFactorAuthClaim = __commonJS({
  "node_modules/supertokens-web-js/lib/build/recipe/multifactorauth/multiFactorAuthClaim.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = { next: verb(0), throw: verb(1), return: verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MultiFactorAuthClaimClass = void 0;
    var utils_1 = require_utils4();
    var MultiFactorAuthClaimClass = (
      /** @class */
      function() {
        function MultiFactorAuthClaimClass2(getRecipeImpl) {
          var _this = this;
          this.getRecipeImpl = getRecipeImpl;
          this.id = "st-mfa";
          this.validators = {
            hasCompletedMFARequirementsForAuth: function() {
              return {
                id: _this.id,
                refresh: function() {
                  var args = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                  }
                  return _this.refresh.apply(_this, args);
                },
                shouldRefresh: function(payload, userContext) {
                  var val = _this.getValueFromPayload(payload, userContext);
                  return val === void 0;
                },
                validate: function(payload, userContext) {
                  return __awaiter(_this, void 0, void 0, function() {
                    var val;
                    return __generator(this, function(_a) {
                      val = this.getValueFromPayload(payload, userContext);
                      if (val === void 0) {
                        return [
                          2,
                          {
                            isValid: false,
                            reason: {
                              message: "MFA info not available in payload"
                            }
                          }
                        ];
                      }
                      if (val.v) {
                        return [
                          2,
                          {
                            isValid: true
                          }
                        ];
                      }
                      return [
                        2,
                        {
                          isValid: false,
                          reason: {
                            message: "not all required factors have been completed"
                          }
                        }
                      ];
                    });
                  });
                }
              };
            },
            hasCompletedFactors: function(requirements) {
              return {
                id: _this.id,
                shouldRefresh: function(payload, userContext) {
                  var val = _this.getValueFromPayload(payload, userContext);
                  return val === void 0;
                },
                refresh: function() {
                  var args = [];
                  for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                  }
                  return _this.refresh.apply(_this, args);
                },
                validate: function(payload, userContext) {
                  var val = _this.getValueFromPayload(payload, userContext);
                  if (val === void 0) {
                    return {
                      isValid: false,
                      reason: {
                        message: "MFA info not available in payload"
                      }
                    };
                  }
                  var completedFactors = val.c;
                  for (var _i = 0, requirements_1 = requirements; _i < requirements_1.length; _i++) {
                    var req = requirements_1[_i];
                    if (typeof req === "object" && "oneOf" in req) {
                      var res = req.oneOf.map(function(r) {
                        return (0, utils_1.checkFactorRequirement)(r, completedFactors);
                      }).filter(function(v) {
                        return v.isValid === false;
                      });
                      if (res.length === req.oneOf.length) {
                        return {
                          isValid: false,
                          reason: {
                            message: "All factor checkers failed in the list",
                            oneOf: req.oneOf,
                            failures: res
                          }
                        };
                      }
                    } else if (typeof req === "object" && "allOfInAnyOrder" in req) {
                      var res = req.allOfInAnyOrder.map(function(r) {
                        return (0, utils_1.checkFactorRequirement)(r, completedFactors);
                      }).filter(function(v) {
                        return v.isValid === false;
                      });
                      if (res.length !== 0) {
                        return {
                          isValid: false,
                          reason: {
                            message: "Some factor checkers failed in the list",
                            allOfInAnyOrder: req.allOfInAnyOrder,
                            failures: res
                          }
                        };
                      }
                    } else {
                      var res = (0, utils_1.checkFactorRequirement)(req, completedFactors);
                      if (res.isValid !== true) {
                        return {
                          isValid: false,
                          reason: {
                            message: "Factor validation failed: " + res.message,
                            factorId: res.id
                          }
                        };
                      }
                    }
                  }
                  return {
                    isValid: true
                  };
                }
              };
            }
          };
        }
        MultiFactorAuthClaimClass2.prototype.refresh = function(userContext) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.getRecipeImpl().resyncSessionAndFetchMFAInfo(userContext)];
                case 1:
                  _a.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        MultiFactorAuthClaimClass2.prototype.getValueFromPayload = function(payload, _userContext) {
          if (payload[this.id] === void 0) {
            return void 0;
          }
          return {
            c: payload[this.id].c,
            v: payload[this.id].v
          };
        };
        MultiFactorAuthClaimClass2.prototype.getLastFetchedTime = function(payload, _userContext) {
          var _a;
          return (_a = payload[this.id]) === null || _a === void 0 ? void 0 : _a.t;
        };
        return MultiFactorAuthClaimClass2;
      }()
    );
    exports.MultiFactorAuthClaimClass = MultiFactorAuthClaimClass;
  }
});

// node_modules/supertokens-web-js/lib/build/recipe/multifactorauth/recipeImplementation.js
var require_recipeImplementation = __commonJS({
  "node_modules/supertokens-web-js/lib/build/recipe/multifactorauth/recipeImplementation.js"(exports) {
    "use strict";
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = {
        label: 0,
        sent: function() {
          if (t[0] & 1) throw t[1];
          return t[1];
        },
        trys: [],
        ops: []
      }, f, y, t, g;
      return g = { next: verb(0), throw: verb(1), return: verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2]) _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getRecipeImplementation = void 0;
    var querier_1 = require_querier();
    function getRecipeImplementation(recipeImplInput) {
      var querier = new querier_1.default(recipeImplInput.recipeId, recipeImplInput.appInfo);
      return {
        resyncSessionAndFetchMFAInfo: function(_a) {
          var options = _a.options, userContext = _a.userContext;
          return __awaiter(this, void 0, void 0, function() {
            var _b, jsonBody, fetchResponse;
            return __generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  return [
                    4,
                    querier.put(
                      void 0,
                      "/mfa/info",
                      {},
                      querier_1.default.preparePreAPIHook({
                        recipePreAPIHook: recipeImplInput.preAPIHook,
                        action: "GET_MFA_INFO",
                        options,
                        userContext
                      }),
                      querier_1.default.preparePostAPIHook({
                        recipePostAPIHook: recipeImplInput.postAPIHook,
                        action: "GET_MFA_INFO",
                        userContext
                      })
                    )
                  ];
                case 1:
                  _b = _c.sent(), jsonBody = _b.jsonBody, fetchResponse = _b.fetchResponse;
                  return [2, __assign(__assign({}, jsonBody), { fetchResponse })];
              }
            });
          });
        }
      };
    }
    exports.default = getRecipeImplementation;
    exports.getRecipeImplementation = getRecipeImplementation;
  }
});

// node_modules/supertokens-website/utils/sessionClaimValidatorStore/index.js
var require_sessionClaimValidatorStore2 = __commonJS({
  "node_modules/supertokens-website/utils/sessionClaimValidatorStore/index.js"(exports) {
    "use strict";
    function __export(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    exports.__esModule = true;
    var d = require_sessionClaimValidatorStore();
    if (d.default !== void 0) {
      __export(d);
    } else {
      __export({
        default: d,
        ...d
      });
    }
  }
});

// node_modules/supertokens-web-js/lib/build/recipe/multifactorauth/recipe.js
var require_recipe = __commonJS({
  "node_modules/supertokens-web-js/lib/build/recipe/multifactorauth/recipe.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __assign = exports && exports.__assign || function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Recipe = void 0;
    var utils_1 = require_utils4();
    var supertokens_js_override_1 = require_build();
    var recipeImplementation_1 = require_recipeImplementation();
    var utils_2 = require_utils();
    var authRecipe_1 = require_authRecipe();
    var postSuperTokensInitCallbacks_1 = require_postSuperTokensInitCallbacks();
    var sessionClaimValidatorStore_1 = require_sessionClaimValidatorStore2();
    var multiFactorAuthClaim_1 = require_multiFactorAuthClaim();
    var Recipe = (
      /** @class */
      function(_super) {
        __extends(Recipe2, _super);
        function Recipe2(config) {
          var _this = _super.call(this, (0, utils_1.normaliseUserInput)(config)) || this;
          var builder = new supertokens_js_override_1.default(
            (0, recipeImplementation_1.default)({
              recipeId: _this.config.recipeId,
              appInfo: _this.config.appInfo,
              clientType: _this.config.clientType,
              preAPIHook: _this.config.preAPIHook,
              postAPIHook: _this.config.postAPIHook
            })
          );
          _this.recipeImplementation = builder.override(_this.config.override.functions).build();
          postSuperTokensInitCallbacks_1.PostSuperTokensInitCallbacks.addPostInitCallback(function() {
            sessionClaimValidatorStore_1.SessionClaimValidatorStore.addClaimValidatorFromOtherRecipe(
              Recipe2.MultiFactorAuthClaim.validators.hasCompletedMFARequirementsForAuth()
            );
          });
          return _this;
        }
        Recipe2.init = function(config) {
          return function(appInfo, clientType) {
            Recipe2.instance = new Recipe2(
              __assign(__assign({}, config), { recipeId: Recipe2.RECIPE_ID, appInfo, clientType })
            );
            return Recipe2.instance;
          };
        };
        Recipe2.getInstanceOrThrow = function() {
          if (Recipe2.instance === void 0) {
            var error = "No instance of MultiFactorAuth found. Make sure to call the MultiFactorAuth.init method.";
            error = (0, utils_2.checkForSSRErrorAndAppendIfNeeded)(error);
            throw Error(error);
          }
          return Recipe2.instance;
        };
        Recipe2.reset = function() {
          if (!(0, utils_2.isTest)()) {
            return;
          }
          Recipe2.instance = void 0;
          return;
        };
        Recipe2.RECIPE_ID = "multifactorauth";
        Recipe2.MultiFactorAuthClaim = new multiFactorAuthClaim_1.MultiFactorAuthClaimClass(function() {
          return Recipe2.getInstanceOrThrow().recipeImplementation;
        });
        return Recipe2;
      }(authRecipe_1.default)
    );
    exports.Recipe = Recipe;
    exports.default = Recipe;
  }
});

// node_modules/supertokens-web-js/lib/build/recipe/multifactorauth/index.js
var require_multifactorauth = __commonJS({
  "node_modules/supertokens-web-js/lib/build/recipe/multifactorauth/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MultiFactorAuthClaimClass = exports.MultiFactorAuthClaim = exports.resyncSessionAndFetchMFAInfo = exports.init = void 0;
    var multiFactorAuthClaim_1 = require_multiFactorAuthClaim();
    Object.defineProperty(exports, "MultiFactorAuthClaimClass", {
      enumerable: true,
      get: function() {
        return multiFactorAuthClaim_1.MultiFactorAuthClaimClass;
      }
    });
    var recipe_1 = require_recipe();
    var utils_1 = require_utils();
    var RecipeWrapper = (
      /** @class */
      function() {
        function RecipeWrapper2() {
        }
        RecipeWrapper2.init = function(config) {
          return recipe_1.default.init(config);
        };
        RecipeWrapper2.resyncSessionAndFetchMFAInfo = function(input) {
          var _a;
          return recipe_1.default.getInstanceOrThrow().recipeImplementation.resyncSessionAndFetchMFAInfo({
            options: (_a = input === null || input === void 0 ? void 0 : input.options) !== null && _a !== void 0 ? _a : {},
            userContext: (0, utils_1.getNormalisedUserContext)(
              input === null || input === void 0 ? void 0 : input.userContext
            )
          });
        };
        RecipeWrapper2.MultiFactorAuthClaim = recipe_1.default.MultiFactorAuthClaim;
        return RecipeWrapper2;
      }()
    );
    exports.default = RecipeWrapper;
    var init = RecipeWrapper.init;
    exports.init = init;
    var resyncSessionAndFetchMFAInfo = RecipeWrapper.resyncSessionAndFetchMFAInfo;
    exports.resyncSessionAndFetchMFAInfo = resyncSessionAndFetchMFAInfo;
    var MultiFactorAuthClaim = RecipeWrapper.MultiFactorAuthClaim;
    exports.MultiFactorAuthClaim = MultiFactorAuthClaim;
  }
});

// node_modules/supertokens-web-js/recipe/multifactorauth/index.js
var require_multifactorauth2 = __commonJS({
  "node_modules/supertokens-web-js/recipe/multifactorauth/index.js"(exports) {
    "use strict";
    function __export(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    exports.__esModule = true;
    __export(require_multifactorauth());
  }
});

// node_modules/supertokens-web-js/lib/build/sessionClaimValidatorStore.js
var require_sessionClaimValidatorStore3 = __commonJS({
  "node_modules/supertokens-web-js/lib/build/sessionClaimValidatorStore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SessionClaimValidatorStore = void 0;
    var sessionClaimValidatorStore_1 = require_sessionClaimValidatorStore2();
    Object.defineProperty(exports, "SessionClaimValidatorStore", {
      enumerable: true,
      get: function() {
        return sessionClaimValidatorStore_1.SessionClaimValidatorStore;
      }
    });
  }
});

// node_modules/supertokens-web-js/utils/sessionClaimValidatorStore.js
var require_sessionClaimValidatorStore4 = __commonJS({
  "node_modules/supertokens-web-js/utils/sessionClaimValidatorStore.js"(exports) {
    "use strict";
    function __export(m) {
      for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    exports.__esModule = true;
    var d = require_sessionClaimValidatorStore3();
    if (d.default !== void 0) {
      __export(d);
    } else {
      __export({
        default: d,
        ...d
      });
    }
  }
});

// node_modules/supertokens-auth-react/lib/build/multifactorauth-shared2.js
var require_multifactorauth_shared2 = __commonJS({
  "node_modules/supertokens-auth-react/lib/build/multifactorauth-shared2.js"(exports) {
    "use strict";
    var genericComponentOverrideContext = require_genericComponentOverrideContext();
    var MultiFactorAuthWebJS = require_multifactorauth2();
    var utils = require_utils3();
    var postSuperTokensInitCallbacks = require_postSuperTokensInitCallbacks2();
    var sessionClaimValidatorStore = require_sessionClaimValidatorStore4();
    var windowHandler = require_windowHandler();
    var index = require_recipeModule_shared();
    var types = require_multifactorauth_shared();
    function _interopDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var MultiFactorAuthWebJS__default = _interopDefault(MultiFactorAuthWebJS);
    var DEFAULT_FACTOR_CHOOSER_PATH = "/mfa";
    var MFA_INFO_CACHE_KEY = "st-mfa-info-cache";
    var lockProm = void 0;
    var getFunctionOverrides = function(_onHandleEvent) {
      return function(originalImp) {
        return genericComponentOverrideContext.__assign(genericComponentOverrideContext.__assign({}, originalImp), {
          resyncSessionAndFetchMFAInfo: function(input) {
            return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
              var stWindow, stored, parsed, unlock, stored_1, parsed, val;
              return genericComponentOverrideContext.__generator(this, function(_a) {
                switch (_a.label) {
                  case 0:
                    stWindow = windowHandler.WindowHandlerReference.getReferenceOrThrow();
                    return [4, lockProm];
                  case 1:
                    _a.sent();
                    return [4, stWindow.windowHandler.sessionStorage.getItem(MFA_INFO_CACHE_KEY)];
                  case 2:
                    stored = _a.sent();
                    if (stored !== null) {
                      parsed = JSON.parse(stored);
                      if (parsed.t > Date.now() - 1e3) {
                        return [
                          2,
                          genericComponentOverrideContext.__assign(
                            genericComponentOverrideContext.__assign({}, parsed.v),
                            {
                              // Adding a fake response is not great, but we do want to add something and this way it's detectable by the app
                              // so they could even add specific handling for it if they preferred.
                              fetchResponse: new Response(null, { status: 304 })
                            }
                          )
                        ];
                      }
                    }
                    _a.label = 3;
                  case 3:
                    if (!(lockProm !== void 0)) return [3, 5];
                    return [4, lockProm];
                  case 4:
                    _a.sent();
                    return [3, 3];
                  case 5:
                    lockProm = new Promise(function(res) {
                      return unlock = res;
                    });
                    _a.label = 6;
                  case 6:
                    _a.trys.push([6, , 11, 12]);
                    return [4, stWindow.windowHandler.sessionStorage.getItem(MFA_INFO_CACHE_KEY)];
                  case 7:
                    stored_1 = _a.sent();
                    if (stored_1 !== null) {
                      parsed = JSON.parse(stored_1);
                      if (parsed.t > Date.now() - 1e3) {
                        return [
                          2,
                          genericComponentOverrideContext.__assign(
                            genericComponentOverrideContext.__assign({}, parsed.v),
                            {
                              // Adding a fake response is not great, but we do want to add something and this way it's detectable by the app
                              // so they could even add specific handling for it if they preferred.
                              fetchResponse: new Response(null, { status: 304 })
                            }
                          )
                        ];
                      }
                    }
                    return [4, originalImp.resyncSessionAndFetchMFAInfo(input)];
                  case 8:
                    val = _a.sent();
                    if (!(val.status === "OK")) return [3, 10];
                    return [
                      4,
                      stWindow.windowHandler.sessionStorage.setItem(
                        MFA_INFO_CACHE_KEY,
                        JSON.stringify({
                          t: Date.now(),
                          v: {
                            emails: val.emails,
                            phoneNumbers: val.phoneNumbers,
                            factors: val.factors,
                            status: val.status
                          }
                        })
                      )
                    ];
                  case 9:
                    _a.sent();
                    _a.label = 10;
                  case 10:
                    return [2, val];
                  case 11:
                    lockProm = void 0;
                    unlock();
                    return [
                      7
                      /*endfinally*/
                    ];
                  case 12:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }
        });
      };
    };
    var MultiFactorAuthClaimClass = (
      /** @class */
      /* @__PURE__ */ function() {
        function MultiFactorAuthClaimClass2(getRecipe, getRedirectURL, onFailureRedirection) {
          var _this = this;
          this.webJSClaim = new MultiFactorAuthWebJS.MultiFactorAuthClaimClass(function() {
            return getRecipe().webJSRecipe;
          });
          this.refresh = this.webJSClaim.refresh;
          this.getLastFetchedTime = this.webJSClaim.getLastFetchedTime;
          this.getValueFromPayload = this.webJSClaim.getValueFromPayload;
          this.id = this.webJSClaim.id;
          var defaultOnFailureRedirection = function(_a) {
            var reason = _a.reason, userContext = _a.userContext;
            return genericComponentOverrideContext.__awaiter(_this, void 0, void 0, function() {
              var recipe, nextFactorOptions, availableFactors, mfaInfo_1, availableFactors;
              return genericComponentOverrideContext.__generator(this, function(_b) {
                switch (_b.label) {
                  case 0:
                    recipe = getRecipe();
                    nextFactorOptions = reason.oneOf || reason.allOfInAnyOrder || (reason.factorId !== void 0 ? [reason.factorId] : void 0);
                    if (!(nextFactorOptions !== void 0)) return [3, 1];
                    genericComponentOverrideContext.logDebugMessage(
                      "Redirecting to MFA on next array from validation failure: " + nextFactorOptions.join(", ")
                    );
                    availableFactors = recipe.getSecondaryFactors(userContext).filter(function(v) {
                      return nextFactorOptions.factors.next.includes(v.id);
                    }).map(function(v) {
                      return v.id;
                    });
                    if (availableFactors.length === 1) {
                      return [
                        2,
                        getRedirectURL(
                          { action: "GO_TO_FACTOR", factorId: availableFactors[0] },
                          userContext
                        )
                      ];
                    } else {
                      return [
                        2,
                        getRedirectURL(
                          { action: "FACTOR_CHOOSER", nextFactorOptions },
                          userContext
                        )
                      ];
                    }
                  case 1:
                    return [
                      4,
                      recipe.webJSRecipe.resyncSessionAndFetchMFAInfo({ userContext })
                    ];
                  case 2:
                    mfaInfo_1 = _b.sent();
                    availableFactors = recipe.getSecondaryFactors(userContext).filter(function(v) {
                      return mfaInfo_1.factors.next.includes(v.id);
                    }).map(function(v) {
                      return v.id;
                    });
                    genericComponentOverrideContext.logDebugMessage(
                      "Redirecting to MFA on next array from backend: " + availableFactors.join(", ")
                    );
                    if (availableFactors.length === 1) {
                      return [
                        2,
                        getRedirectURL(
                          { action: "GO_TO_FACTOR", factorId: availableFactors[0] },
                          userContext
                        )
                      ];
                    } else {
                      return [2, getRedirectURL({ action: "FACTOR_CHOOSER" }, userContext)];
                    }
                  case 3:
                    return [2, void 0];
                }
              });
            });
          };
          this.validators = genericComponentOverrideContext.__assign(
            genericComponentOverrideContext.__assign({}, this.webJSClaim.validators),
            {
              hasCompletedMFARequirementsForAuth: function(doRedirection, showAccessDeniedOnFailure) {
                if (doRedirection === void 0) {
                  doRedirection = true;
                }
                if (showAccessDeniedOnFailure === void 0) {
                  showAccessDeniedOnFailure = true;
                }
                var orig = _this.webJSClaim.validators.hasCompletedMFARequirementsForAuth();
                return genericComponentOverrideContext.__assign(
                  genericComponentOverrideContext.__assign({}, orig),
                  {
                    showAccessDeniedOnFailure,
                    onFailureRedirection: onFailureRedirection !== null && onFailureRedirection !== void 0 ? onFailureRedirection : function(_a) {
                      var reason = _a.reason, userContext = _a.userContext;
                      return doRedirection ? defaultOnFailureRedirection({
                        reason,
                        userContext
                      }) : void 0;
                    }
                  }
                );
              },
              hasCompletedFactors: function(requirements, doRedirection, showAccessDeniedOnFailure) {
                if (doRedirection === void 0) {
                  doRedirection = true;
                }
                if (showAccessDeniedOnFailure === void 0) {
                  showAccessDeniedOnFailure = true;
                }
                var orig = _this.webJSClaim.validators.hasCompletedFactors(requirements);
                return genericComponentOverrideContext.__assign(
                  genericComponentOverrideContext.__assign({}, orig),
                  {
                    showAccessDeniedOnFailure,
                    onFailureRedirection: onFailureRedirection !== null && onFailureRedirection !== void 0 ? onFailureRedirection : function(_a) {
                      var reason = _a.reason, userContext = _a.userContext;
                      return doRedirection ? defaultOnFailureRedirection({
                        reason,
                        userContext
                      }) : void 0;
                    }
                  }
                );
              }
            }
          );
        }
        return MultiFactorAuthClaimClass2;
      }()
    );
    function normaliseMultiFactorAuthFeature(config) {
      var _a;
      if (config === void 0) {
        config = {};
      }
      var disableDefaultUI = config.disableDefaultUI === true;
      var override = genericComponentOverrideContext.__assign(
        {
          functions: function(originalImplementation) {
            return originalImplementation;
          }
        },
        config.override
      );
      return genericComponentOverrideContext.__assign(
        genericComponentOverrideContext.__assign(
          {},
          genericComponentOverrideContext.normaliseRecipeModuleConfig(config)
        ),
        {
          disableDefaultUI,
          firstFactors: config === null || config === void 0 ? void 0 : config.firstFactors,
          getSecondaryFactorInfo: function(orig) {
            return orig;
          },
          factorChooserScreen: (_a = config.factorChooserScreen) !== null && _a !== void 0 ? _a : {},
          override
        }
      );
    }
    function getAvailableFactors(factors, nextArrayQueryParam, recipe, userContext) {
      genericComponentOverrideContext.logDebugMessage(
        "getAvailableFactors: allowed to setup: ".concat(factors.allowedToSetup)
      );
      genericComponentOverrideContext.logDebugMessage(
        "getAvailableFactors: already setup: ".concat(factors.alreadySetup)
      );
      genericComponentOverrideContext.logDebugMessage("getAvailableFactors: next from factorInfo: ".concat(factors.next));
      genericComponentOverrideContext.logDebugMessage(
        "getAvailableFactors: nextArrayQueryParam: ".concat(nextArrayQueryParam)
      );
      genericComponentOverrideContext.logDebugMessage(
        "getAvailableFactors: secondary factors: ".concat(
          recipe.getSecondaryFactors(userContext).map(function(f) {
            return f.id;
          })
        )
      );
      var nextArr = nextArrayQueryParam !== void 0 ? nextArrayQueryParam.split(",") : factors.next;
      var availableFactors = recipe.getSecondaryFactors(userContext).filter(function(_a) {
        var id = _a.id;
        return nextArr.length === 0 ? factors.allowedToSetup.includes(id) || factors.alreadySetup.includes(id) : nextArr.includes(id);
      });
      return availableFactors;
    }
    var MultiFactorAuth = (
      /** @class */
      function(_super) {
        genericComponentOverrideContext.__extends(MultiFactorAuth2, _super);
        function MultiFactorAuth2(config, webJSRecipe) {
          if (webJSRecipe === void 0) {
            webJSRecipe = MultiFactorAuthWebJS__default.default;
          }
          var _this = _super.call(this, config) || this;
          _this.webJSRecipe = webJSRecipe;
          _this.recipeID = MultiFactorAuth2.RECIPE_ID;
          _this.secondaryFactors = [];
          _this.getDefaultRedirectionURL = function(context, userContext) {
            return genericComponentOverrideContext.__awaiter(_this, void 0, void 0, function() {
              var nParam, redirectInfo;
              return genericComponentOverrideContext.__generator(this, function(_b) {
                if (context.action === "FACTOR_CHOOSER") {
                  nParam = context.nextFactorOptions && context.nextFactorOptions.length > 0 ? context.nextFactorOptions.join(",") : void 0;
                  return [
                    2,
                    genericComponentOverrideContext.getDefaultRedirectionURLForPath(
                      this.config,
                      DEFAULT_FACTOR_CHOOSER_PATH,
                      context,
                      {
                        n: nParam,
                        stepUp: context.stepUp ? "true" : void 0
                      }
                    )
                  ];
                } else if (context.action === "GO_TO_FACTOR") {
                  redirectInfo = this.getSecondaryFactors(userContext).find(function(f) {
                    return f.id === context.factorId;
                  });
                  if (redirectInfo !== void 0) {
                    return [
                      2,
                      genericComponentOverrideContext.getDefaultRedirectionURLForPath(
                        this.config,
                        redirectInfo.path,
                        context,
                        {
                          setup: context.forceSetup ? "true" : void 0,
                          stepUp: context.stepUp ? "true" : void 0
                        }
                      )
                    ];
                  }
                  throw new Error("Requested redirect to unknown factor id: " + context.factorId);
                } else {
                  return [2, "/"];
                }
              });
            });
          };
          postSuperTokensInitCallbacks.PostSuperTokensInitCallbacks.addPostInitCallback(function() {
            var defaultFactorsValidator = MultiFactorAuth2.MultiFactorAuthClaim.validators.hasCompletedMFARequirementsForAuth();
            sessionClaimValidatorStore.SessionClaimValidatorStore.addClaimValidatorFromOtherRecipe(
              defaultFactorsValidator
            );
            types.Session.getInstanceOrThrow().addEventListener(function() {
              var stWindow = windowHandler.WindowHandlerReference.getReferenceOrThrow();
              stWindow.windowHandler.sessionStorage.removeItemSync(MFA_INFO_CACHE_KEY);
            });
          });
          return _this;
        }
        MultiFactorAuth2.init = function(config) {
          var normalisedConfig = normaliseMultiFactorAuthFeature(config);
          return {
            recipeID: MultiFactorAuth2.RECIPE_ID,
            authReact: function(appInfo) {
              MultiFactorAuth2.instance = new MultiFactorAuth2(
                genericComponentOverrideContext.__assign(
                  genericComponentOverrideContext.__assign({}, normalisedConfig),
                  { appInfo, recipeId: MultiFactorAuth2.RECIPE_ID }
                )
              );
              return MultiFactorAuth2.instance;
            },
            webJS: MultiFactorAuthWebJS__default.default.init(
              genericComponentOverrideContext.__assign(
                genericComponentOverrideContext.__assign({}, normalisedConfig),
                {
                  override: {
                    functions: function(originalImpl, builder) {
                      var functions = getFunctionOverrides(normalisedConfig.onHandleEvent);
                      builder.override(functions);
                      builder.override(normalisedConfig.override.functions);
                      return originalImpl;
                    }
                  }
                }
              )
            )
          };
        };
        MultiFactorAuth2.getInstance = function() {
          return MultiFactorAuth2.instance;
        };
        MultiFactorAuth2.getInstanceOrThrow = function() {
          if (MultiFactorAuth2.instance === void 0) {
            var error = "No instance of MultiFactorAuth found. Make sure to call the MultiFactorAuth.init method.";
            if (typeof window === "undefined") {
              error = error + genericComponentOverrideContext.SSR_ERROR;
            }
            throw Error(error);
          }
          return MultiFactorAuth2.instance;
        };
        MultiFactorAuth2.prototype.addMFAFactors = function(secondaryFactors) {
          this.secondaryFactors = genericComponentOverrideContext.__spreadArray(
            genericComponentOverrideContext.__spreadArray(
              [],
              this.secondaryFactors.filter(function(factor) {
                return secondaryFactors.every(function(newFactor) {
                  return factor.id !== newFactor.id;
                });
              }),
              true
            ),
            secondaryFactors,
            true
          );
        };
        MultiFactorAuth2.prototype.isFirstFactorEnabledOnClient = function(factorId) {
          return this.config.firstFactors === void 0 || this.config.firstFactors.includes(factorId);
        };
        MultiFactorAuth2.prototype.getSecondaryFactors = function(userContext) {
          return this.config.getSecondaryFactorInfo(this.secondaryFactors, userContext);
        };
        MultiFactorAuth2.prototype.redirectToFactor = function(_b) {
          var factorId = _b.factorId, forceSetup = _b.forceSetup, stepUp = _b.stepUp, redirectBack = _b.redirectBack, navigate = _b.navigate, userContext = _b.userContext;
          return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
            var url, redirectUrl, redirectUrl;
            return genericComponentOverrideContext.__generator(this, function(_c) {
              switch (_c.label) {
                case 0:
                  return [
                    4,
                    this.getRedirectUrl(
                      {
                        action: "GO_TO_FACTOR",
                        forceSetup,
                        stepUp,
                        factorId,
                        tenantIdFromQueryParams: genericComponentOverrideContext.getTenantIdFromQueryParams()
                      },
                      utils.getNormalisedUserContext(userContext)
                    )
                  ];
                case 1:
                  url = _c.sent();
                  if (url === null) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  if (redirectBack) {
                    redirectUrl = genericComponentOverrideContext.getCurrentNormalisedUrlPathWithQueryParamsAndFragments();
                    url = genericComponentOverrideContext.appendQueryParamsToURL(url, {
                      redirectToPath: redirectUrl
                    });
                  } else {
                    redirectUrl = genericComponentOverrideContext.getRedirectToPathFromURL();
                    if (redirectUrl) {
                      url = genericComponentOverrideContext.appendQueryParamsToURL(url, {
                        redirectToPath: redirectUrl
                      });
                    }
                  }
                  return [
                    2,
                    genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().redirectToUrl(
                      url,
                      navigate
                    )
                  ];
              }
            });
          });
        };
        MultiFactorAuth2.prototype.redirectToFactorChooser = function(_b) {
          var _c = _b.redirectBack, redirectBack = _c === void 0 ? false : _c, _d = _b.nextFactorOptions, nextFactorOptions = _d === void 0 ? [] : _d, stepUp = _b.stepUp, navigate = _b.navigate, userContext = _b.userContext;
          return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
            var url, redirectUrl, redirectUrl;
            return genericComponentOverrideContext.__generator(this, function(_e) {
              switch (_e.label) {
                case 0:
                  return [
                    4,
                    this.getRedirectUrl(
                      {
                        action: "FACTOR_CHOOSER",
                        nextFactorOptions,
                        stepUp,
                        tenantIdFromQueryParams: genericComponentOverrideContext.getTenantIdFromQueryParams()
                      },
                      utils.getNormalisedUserContext(userContext)
                    )
                  ];
                case 1:
                  url = _e.sent();
                  if (url === null) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  if (redirectBack) {
                    redirectUrl = genericComponentOverrideContext.getCurrentNormalisedUrlPathWithQueryParamsAndFragments();
                    url = genericComponentOverrideContext.appendQueryParamsToURL(url, {
                      redirectToPath: redirectUrl
                    });
                  } else {
                    redirectUrl = genericComponentOverrideContext.getRedirectToPathFromURL();
                    if (redirectUrl) {
                      url = genericComponentOverrideContext.appendQueryParamsToURL(url, {
                        redirectToPath: redirectUrl
                      });
                    }
                  }
                  return [
                    2,
                    genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().redirectToUrl(
                      url,
                      navigate
                    )
                  ];
              }
            });
          });
        };
        MultiFactorAuth2.reset = function() {
          if (!genericComponentOverrideContext.isTest()) {
            return;
          }
          MultiFactorAuth2.instance = void 0;
          return;
        };
        var _a;
        _a = MultiFactorAuth2;
        MultiFactorAuth2.RECIPE_ID = "multifactorauth";
        MultiFactorAuth2.MultiFactorAuthClaim = new MultiFactorAuthClaimClass(
          function() {
            return MultiFactorAuth2.getInstanceOrThrow();
          },
          function(context, userContext) {
            return genericComponentOverrideContext.__awaiter(void 0, void 0, void 0, function() {
              return genericComponentOverrideContext.__generator(_a, function(_b) {
                switch (_b.label) {
                  case 0:
                    return [
                      4,
                      this.getInstanceOrThrow().getRedirectUrl(
                        genericComponentOverrideContext.__assign(
                          genericComponentOverrideContext.__assign({}, context),
                          {
                            tenantIdFromQueryParams: genericComponentOverrideContext.getTenantIdFromQueryParams()
                          }
                        ),
                        userContext
                      )
                    ];
                  case 1:
                    return [2, _b.sent() || void 0];
                }
              });
            });
          }
        );
        return MultiFactorAuth2;
      }(index.RecipeModule)
    );
    exports.DEFAULT_FACTOR_CHOOSER_PATH = DEFAULT_FACTOR_CHOOSER_PATH;
    exports.MultiFactorAuth = MultiFactorAuth;
    exports.getAvailableFactors = getAvailableFactors;
  }
});

// node_modules/supertokens-auth-react/lib/build/index2.js
var require_index2 = __commonJS({
  "node_modules/supertokens-auth-react/lib/build/index2.js"(exports) {
    "use strict";
    var genericComponentOverrideContext = require_genericComponentOverrideContext();
    var jsxRuntime = require_jsx_runtime();
    var React = require_react();
    var NormalisedURLPath = require_normalisedURLPath2();
    var translationContext = require_translationContext();
    var windowHandler = require_windowHandler();
    var reactDom = require_react_dom();
    var componentOverrideContext = require_multitenancy_shared();
    var recipe$1 = require_multifactorauth_shared2();
    var types = require_multifactorauth_shared();
    var recipe = require_oauth2provider_shared();
    var utils = require_authRecipe_shared();
    var NormalisedURLPath$1 = require_normalisedURLPath();
    function _interopDefault(e) {
      return e && e.__esModule ? e : { default: e };
    }
    var React__default = _interopDefault(React);
    var NormalisedURLPath__default = _interopDefault(NormalisedURLPath);
    var NormalisedURLPath__default$1 = _interopDefault(NormalisedURLPath$1);
    var ComponentOverrideContext = React__default.default.createContext("IS_DEFAULT");
    function SpinnerIcon() {
      return jsxRuntime.jsx(
        "svg",
        genericComponentOverrideContext.__assign(
          { version: "1.1", viewBox: "25 25 50 50", "data-supertokens": "spinnerIcon" },
          {
            children: jsxRuntime.jsxs(
              "circle",
              genericComponentOverrideContext.__assign(
                {
                  cx: "50",
                  cy: "50",
                  r: "20",
                  fill: "none",
                  stroke: "rgb(var(--palette-primary))",
                  strokeWidth: "5",
                  strokeLinecap: "round",
                  strokeDashoffset: "0",
                  strokeDasharray: "100, 200"
                },
                {
                  children: [
                    jsxRuntime.jsx("animateTransform", {
                      attributeName: "transform",
                      attributeType: "XML",
                      type: "rotate",
                      from: "0 50 50",
                      to: "360 50 50",
                      dur: "4s",
                      repeatCount: "indefinite"
                    }),
                    jsxRuntime.jsx("animate", {
                      attributeName: "stroke-dashoffset",
                      values: "0;-30;-124",
                      dur: "2s",
                      repeatCount: "indefinite"
                    }),
                    jsxRuntime.jsx("animate", {
                      attributeName: "stroke-dasharray",
                      values: "0,200;110,200;110,200",
                      dur: "2s",
                      repeatCount: "indefinite"
                    })
                  ]
                }
              )
            )
          }
        )
      );
    }
    var useComponentOverride = function(overrideKey) {
      var ctx = React.useContext(ComponentOverrideContext);
      if (ctx === "IS_DEFAULT") {
        throw new Error("Cannot use component override outside ComponentOverrideContext provider.");
      }
      var OverrideComponent = ctx[overrideKey];
      return OverrideComponent === void 0 ? null : OverrideComponent;
    };
    var withOverride = function(overrideKey, DefaultComponent) {
      var finalKey = overrideKey + "_Override";
      DefaultComponent.displayName = finalKey;
      return function(props) {
        var OverrideComponent = useComponentOverride(finalKey);
        if (OverrideComponent !== null) {
          return jsxRuntime.jsx(
            OverrideComponent,
            genericComponentOverrideContext.__assign({ DefaultComponent }, props)
          );
        }
        return jsxRuntime.jsx(DefaultComponent, genericComponentOverrideContext.__assign({}, props));
      };
    };
    var styles$1 = '[data-supertokens~="container"] {\n    --palette-background: 255, 255, 255;\n    --palette-inputBackground: 250, 250, 250;\n    --palette-inputBorder: 224, 224, 224;\n    --palette-primary: 28, 34, 42;\n    --palette-primaryBorder: 45, 54, 68;\n    --palette-success: 65, 167, 0;\n    --palette-successBackground: 217, 255, 191;\n    --palette-error: 255, 23, 23;\n    --palette-errorBackground: 255, 241, 235;\n    --palette-textTitle: 0, 0, 0;\n    --palette-textLabel: 0, 0, 0;\n    --palette-textInput: 0, 0, 0;\n    --palette-textPrimary: 128, 128, 128;\n    --palette-textLink: 0, 122, 255;\n    --palette-buttonText: 255, 255, 255;\n    --palette-textGray: 54, 54, 54;\n    --palette-superTokensBrandingBackground: 242, 245, 246;\n    --palette-superTokensBrandingText: 173, 189, 196;\n    --palette-buttonGreyedOut: 221, 221, 221;\n    --palette-caution: 124, 96, 62;\n    --palette-errorDark: 207, 54, 68;\n\n    --font-size-0: 12px;\n    --font-size-1: 14px;\n    --font-size-2: 16px;\n    --font-size-3: 19px;\n    --font-size-4: 24px;\n    --font-size-5: 28px;\n}\n/*\n * Default styles.\n */\n@keyframes slideTop {\n    0% {\n        transform: translateY(-5px);\n    }\n    100% {\n        transform: translateY(0px);\n    }\n}\n@keyframes swing-in-top-fwd {\n    0% {\n        transform: rotateX(-100deg);\n        transform-origin: top;\n        opacity: 0;\n    }\n    100% {\n        transform: rotateX(0deg);\n        transform-origin: top;\n        opacity: 1;\n    }\n}\n[data-supertokens~="container"] {\n    font-family: "Arial", sans-serif;\n    margin: 12px auto;\n    margin-top: 26px;\n    margin-bottom: 26px;\n    width: 420px;\n    text-align: center;\n    border-radius: 8px;\n    box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.16);\n    background-color: rgb(var(--palette-background));\n}\n@media (max-width: 440px) {\n    [data-supertokens~="container"] {\n        width: 95vw;\n    }\n}\n[data-supertokens~="row"] {\n    margin: 0 auto;\n    width: 76%;\n    padding-top: 30px;\n    padding-bottom: 10px;\n}\n[data-supertokens~="superTokensBranding"] {\n    display: block;\n    margin: 10px auto 0;\n    background: rgb(var(--palette-superTokensBrandingBackground));\n    color: rgb(var(--palette-superTokensBrandingText));\n    text-decoration: none;\n    width: -webkit-fit-content;\n    width: fit-content;\n    border-radius: 6px 6px 0 0;\n    padding: 4px 9px;\n    font-weight: 400;\n    font-size: var(--font-size-0);\n    letter-spacing: 0.4px;\n}\n[data-supertokens~="generalError"] {\n    background: rgb(var(--palette-errorBackground));\n    padding-top: 10px;\n    padding-bottom: 10px;\n    margin-bottom: 10px;\n    margin-top: 24px;\n    padding-left: 18px;\n    padding-right: 18px;\n    letter-spacing: 0.2px;\n    font-size: var(--font-size-1);\n    border-radius: 8px;\n    color: rgb(var(--palette-error));\n    animation: swing-in-top-fwd 1s cubic-bezier(0.175, 0.885, 0.32, 1.275) both;\n    word-wrap: break-word;\n}\n[data-supertokens~="headerTitle"] {\n    font-size: var(--font-size-4);\n    line-height: 27.6px;\n    letter-spacing: 0.58px;\n    font-weight: 700;\n    margin-bottom: 20px;\n    color: rgb(var(--palette-textTitle));\n}\n[data-supertokens~="headerSubtitle"] {\n    font-weight: 400;\n    color: rgb(var(--palette-textGray));\n    margin-bottom: 21px;\n}\n[data-supertokens~="headerSubtitle"][data-supertokens~="secondaryText"] {\n    color: rgb(var(--palette-textGray));\n    font-weight: 400;\n}\n[data-supertokens~="privacyPolicyAndTermsAndConditions"] {\n    max-width: 300px;\n    margin-top: 10px;\n}\n[data-supertokens~="privacyPolicyAndTermsAndConditions"] a {\n    line-height: 21px;\n}\n/* TODO: split the link style into separate things*/\n/* We add this before primary and secondary text, because if they are applied to the same element the other ones take priority */\n[data-supertokens~="link"] {\n    padding-left: 3px;\n    padding-right: 3px;\n    color: rgb(var(--palette-textLink));\n    font-size: var(--font-size-1);\n    cursor: pointer;\n    letter-spacing: 0.16px;\n    line-height: 26px;\n}\n[data-supertokens~="primaryText"] {\n    font-size: var(--font-size-2);\n    font-weight: 400;\n    letter-spacing: 0.4px;\n    line-height: 21px;\n    color: rgb(var(--palette-textLabel));\n}\n[data-supertokens~="secondaryText"] {\n    font-size: var(--font-size-1);\n    font-weight: 400;\n    letter-spacing: 0.4px;\n    color: rgb(var(--palette-textPrimary));\n}\n[data-supertokens~="secondaryText"] strong {\n    font-weight: 600;\n}\n[data-supertokens~="divider"] {\n    margin-top: 1.5em;\n    margin-bottom: 1.5em;\n    border-bottom: 0.3px solid #dddddd;\n    align-items: center;\n    padding-bottom: 5px;\n    flex: 3 3;\n}\n[data-supertokens~="headerTinyTitle"] {\n    margin-top: 24px;\n    font-size: var(--font-size-5);\n    letter-spacing: 1.1px;\n    font-weight: 700;\n    line-height: 28px;\n}\n[data-supertokens~="secondaryLinkWithArrow"] {\n    margin-top: 10px;\n    margin-bottom: 30px;\n    cursor: pointer;\n}\n[data-supertokens~="secondaryLinkWithArrow"]:hover {\n    position: relative;\n    left: 2px;\n    word-spacing: 4px;\n}\n[data-supertokens~="generalSuccess"] {\n    color: rgb(var(--palette-success));\n    font-size: var(--font-size-1);\n    background: rgb(var(--palette-successBackground));\n    animation: swing-in-top-fwd 1s cubic-bezier(0.175, 0.885, 0.32, 1.275) both;\n    padding: 9px 15px 9px 15px;\n    border-radius: 6px;\n    display: inline-block;\n}\n[data-supertokens~="spinner"] {\n    width: 80px;\n    height: auto;\n    padding-top: 20px;\n    padding-bottom: 40px;\n    margin: 0 auto;\n}\n[data-supertokens~="error"] {\n    color: rgb(var(--palette-error));\n}\n[data-supertokens~="linkButton"] {\n    font-family: "Arial", sans-serif;\n    background-color: transparent;\n    border: 0;\n}\n[data-supertokens~="secondaryLinkWithLeftArrow"] {\n    color: rgb(var(--palette-textGray));\n    font-weight: 400;\n    margin-top: 10px;\n    margin-bottom: 40px;\n    cursor: pointer;\n}\n[data-supertokens~="secondaryLinkWithLeftArrow"] svg {\n    margin-right: 0.3em;\n}\n[data-supertokens~="secondaryLinkWithLeftArrow"]:hover svg {\n    position: relative;\n    left: -4px;\n}\n[data-supertokens~="button"] {\n    font-family: "Arial", sans-serif;\n    background-color: rgb(var(--palette-primary));\n    color: rgb(var(--palette-buttonText));\n    width: 100%;\n    height: 34px;\n    font-weight: 600;\n    border-width: 1px;\n    border-style: solid;\n    border-radius: 6px;\n    border-color: rgb(var(--palette-primaryBorder));\n    background-position: center;\n    transition: all 0.4s;\n    background-size: 12000%;\n    cursor: pointer;\n}\n[data-supertokens~="buttonGreyedOut"] {\n    background-color: rgb(var(--palette-buttonGreyedOut));\n    border-color: rgb(var(--palette-buttonGreyedOut));\n}\n[data-supertokens~="buttonWithIcon"] {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n}\n[data-supertokens~="button"]:disabled {\n    border: none;\n    cursor: no-drop;\n}\n[data-supertokens~="button"]:active {\n    outline: none;\n    transition: all 0s;\n    background-size: 100%;\n    filter: brightness(0.85);\n}\n[data-supertokens~="button"]:focus {\n    outline: none;\n}\n[data-supertokens~="backButtonCommon"] {\n    width: 16px;\n    height: 13px;\n}\n[data-supertokens~="backButton"] {\n    cursor: pointer;\n    border: none;\n    background-color: transparent;\n    padding: 0px;\n}\n[data-supertokens~="backButtonPlaceholder"] {\n    display: block;\n}\n[data-supertokens~="delayedRender"] {\n    animation-duration: 0.1s;\n    animation-name: animate-fade;\n    animation-delay: 0.2s;\n    animation-fill-mode: backwards;\n}\n@keyframes animate-fade {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n[data-supertokens~="footerLinkGroupVert"] {\n    display: flex;\n    flex-direction: column;\n    margin-top: 10px;\n    gap: 24px;\n}\n[data-supertokens~="footerLinkGroupVert"] > div {\n    cursor: pointer;\n    margin: 0;\n}\n[data-supertokens~="footerLinkGroupVert"] [data-supertokens~="secondaryText"] {\n    font-weight: 400;\n}\n[data-supertokens~="footerLinkGroupVert"] [data-supertokens~="secondaryLinkWithLeftArrow"] {\n    font-weight: 400;\n    position: relative;\n    left: -6px; /* half the width of the left arrow */\n}\n@media (max-width: 360px) {\n    [data-supertokens~="footerLinkGroupVert"] {\n        flex-direction: column;\n    }\n    [data-supertokens~="footerLinkGroupVert"] > div {\n        margin: 0 auto;\n    }\n}\n[data-supertokens~="footerLinkGroupVert"] div:only-child {\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 14px;\n}\n[data-supertokens~="withBackButton"] {\n    position: relative;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n[data-supertokens~="dividerWithOr"] {\n    padding-top: 5px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    color: rgb(var(--palette-textPrimary));\n}\n[data-supertokens~="dividerText"] {\n    flex: 1 1;\n    font-weight: 400;\n    font-size: var(--font-size-1);\n}\n[data-supertokens~="formLabelWithLinkWrapper"] {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n[data-supertokens~="formLabelLinkBtn"] {\n    width: auto;\n    margin-top: 0;\n    line-height: 24px;\n    font-size: var(--font-size-0);\n}\n[data-supertokens~="formLabelLinkBtn"]:hover {\n    text-decoration: underline;\n}\n[data-supertokens~="formLabelLinkBtn"]:disabled {\n    color: rgb(var(--palette-textPrimary));\n    cursor: default;\n    text-decoration: none;\n}\n[data-supertokens~="authComponentList"] {\n    padding-bottom: 20px;\n}\n[data-supertokens~="authPageTitleOAuthClient"] {\n    color: rgb(var(--palette-textGray));\n    font-size: var(--font-size-1);\n    font-weight: 400;\n    margin: 10px 0 25px;\n}\n[data-supertokens~="authPageTitleOAuthClientUrl"] {\n    text-decoration: none;\n}\n[data-supertokens~="authPageTitleOAuthClientLogo"] {\n    width: 44px;\n    height: 44px;\n    margin-bottom: 10px;\n}\n[data-supertokens~="authPageTitleOAuthClient"] [data-supertokens~="authPageTitleOAuthClientName"] {\n    color: rgb(var(--palette-textTitle));\n}\n[data-supertokens~="buttonWithArrow"] {\n    border-radius: 6px;\n    border: 1px solid #d0d5dd;\n    width: 100%;\n    color: rgb(var(--palette-textGray));\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 5px;\n    margin: 24px 0;\n    min-height: 48px;\n    cursor: pointer;\n}\n[data-supertokens~="buttonWithArrow"]:hover {\n    background-color: rgb(var(--palette-inputBackground));\n}\n[data-supertokens~="buttonWithArrow"] [data-supertokens~="secondaryText"] {\n    font-weight: 700;\n    font-size: var(--font-size-2);\n    color: rgb(var(--palette-textGray));\n    margin: 0;\n}\n[data-supertokens~="buttonWithArrow"]:hover [data-supertokens~="secondaryLinkWithRightArrow"] ~ svg {\n    position: relative;\n    left: 2px;\n}\n[data-supertokens~="buttonWithArrow"]:hover [data-supertokens~="secondaryLinkWithLeftArrow"] svg {\n    position: relative;\n    left: -2px;\n}\n[data-supertokens~="buttonWithArrow"] [data-supertokens~="secondaryLinkWithLeftArrow"] {\n    display: flex;\n    align-items: center;\n}\n';
    var ThemeBase$1 = function(_a2) {
      var children = _a2.children, userStyles = _a2.userStyles;
      return jsxRuntime.jsxs(React.Fragment, {
        children: [children, jsxRuntime.jsxs("style", { children: [styles$1, userStyles.join("\n")] })]
      });
    };
    var MultitenancyDynamicLoginMethodsSpinnerTheme = function() {
      return jsxRuntime.jsx(
        "div",
        genericComponentOverrideContext.__assign(
          { "data-supertokens": "container delayedRender" },
          {
            children: jsxRuntime.jsx(
              "div",
              genericComponentOverrideContext.__assign(
                { "data-supertokens": "row" },
                {
                  children: jsxRuntime.jsx(
                    "div",
                    genericComponentOverrideContext.__assign(
                      { "data-supertokens": "spinner delayedRender" },
                      { children: jsxRuntime.jsx(SpinnerIcon, {}) }
                    )
                  )
                }
              )
            )
          }
        )
      );
    };
    var DynamicLoginMethodsSpinnerThemeWithOverride = withOverride(
      "MultitenancyDynamicLoginMethodsSpinnerTheme",
      MultitenancyDynamicLoginMethodsSpinnerTheme
    );
    var DynamicLoginMethodsSpinnerTheme = function(props) {
      var rootStyle = genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().rootStyle;
      return jsxRuntime.jsx(
        ThemeBase$1,
        genericComponentOverrideContext.__assign(
          { userStyles: [rootStyle, props.config.recipeRootStyle] },
          { children: jsxRuntime.jsx(DynamicLoginMethodsSpinnerThemeWithOverride, {}) }
        )
      );
    };
    var DynamicLoginMethodsSpinner = function() {
      var recipe2 = genericComponentOverrideContext.Multitenancy.getInstanceOrThrow();
      var recipeComponentOverrides = componentOverrideContext.useContext();
      return jsxRuntime.jsx(
        ComponentOverrideContext.Provider,
        genericComponentOverrideContext.__assign(
          { value: recipeComponentOverrides },
          {
            children: jsxRuntime.jsx(
              WithOrWithoutShadowDom,
              genericComponentOverrideContext.__assign(
                { useShadowDom: genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().useShadowDom },
                { children: jsxRuntime.jsx(DynamicLoginMethodsSpinnerTheme, { config: recipe2.config }) }
              )
            )
          }
        )
      );
    };
    var dynamicLoginMethodsContext = React__default.default.createContext(void 0);
    var useDynamicLoginMethods = function() {
      var value = React__default.default.useContext(dynamicLoginMethodsContext);
      if (value === void 0) {
        throw new Error("useDynamicLoginMethods used outside of a valid provider (FeatureWrapper)");
      }
      return value;
    };
    var DynamicLoginMethodsProvider = function(_a2) {
      var value = _a2.value, children = _a2.children;
      var contextValue = value === void 0 ? { loaded: false } : { loaded: true, loginMethods: value };
      return jsxRuntime.jsx(
        dynamicLoginMethodsContext.Provider,
        genericComponentOverrideContext.__assign({ value: contextValue }, { children })
      );
    };
    var UserContextContext = React__default.default.createContext(void 0);
    var useUserContext = function() {
      return React__default.default.useContext(UserContextContext);
    };
    var UserContextProvider = function(_a2) {
      var children = _a2.children, userContext = _a2.userContext;
      var currentUserContext = React.useState(genericComponentOverrideContext.getNormalisedUserContext(userContext))[0];
      return jsxRuntime.jsx(
        UserContextContext.Provider,
        genericComponentOverrideContext.__assign({ value: currentUserContext }, { children })
      );
    };
    function FeatureWrapper(_a2) {
      var children = _a2.children, useShadowDom = _a2.useShadowDom, defaultStore = _a2.defaultStore;
      var userContext = useUserContext();
      var rethrowInRender = genericComponentOverrideContext.useRethrowInRender();
      var _b = React.useState(void 0), loadedDynamicLoginMethods = _b[0], setLoadedDynamicLoginMethods = _b[1];
      var st = genericComponentOverrideContext.SuperTokens.getInstanceOrThrow();
      React.useEffect(
        function() {
          if (loadedDynamicLoginMethods) {
            return;
          }
          genericComponentOverrideContext.Multitenancy.getInstanceOrThrow().getCurrentDynamicLoginMethods({ userContext }).then(
            function(loginMethods) {
              return setLoadedDynamicLoginMethods(loginMethods);
            },
            function(err) {
              return rethrowInRender(err);
            }
          );
        },
        [loadedDynamicLoginMethods, setLoadedDynamicLoginMethods]
      );
      if (genericComponentOverrideContext.SuperTokens.usesDynamicLoginMethods && !loadedDynamicLoginMethods) {
        return jsxRuntime.jsx(DynamicLoginMethodsSpinner, {});
      }
      return jsxRuntime.jsx(
        DynamicLoginMethodsProvider,
        genericComponentOverrideContext.__assign(
          { value: loadedDynamicLoginMethods },
          {
            children: jsxRuntime.jsx(
              translationContext.TranslationContextProvider,
              genericComponentOverrideContext.__assign(
                {
                  defaultLanguage: st.languageTranslations.defaultLanguage,
                  defaultStore: genericComponentOverrideContext.mergeObjects(
                    defaultStore,
                    st.languageTranslations.userTranslationStore
                  ),
                  translationControlEventSource: st.languageTranslations.translationEventSource,
                  userTranslationFunc: st.languageTranslations.userTranslationFunc
                },
                {
                  children: jsxRuntime.jsx(
                    WithOrWithoutShadowDom,
                    genericComponentOverrideContext.__assign(
                      { useShadowDom },
                      { children }
                    )
                  )
                }
              )
            )
          }
        )
      );
    }
    function WithShadowDom(_a2) {
      var children = _a2.children;
      var rootDiv = React.useRef(null);
      var _b = React.useState(), shadowRoot = _b[0], setShadowRoot = _b[1];
      React.useEffect(
        function() {
          if (rootDiv.current) {
            setShadowRoot(function(os) {
              return os || rootDiv.current.shadowRoot || rootDiv.current.attachShadow({ mode: "open", delegatesFocus: false });
            });
          }
        },
        [rootDiv]
      );
      return jsxRuntime.jsx(
        "div",
        genericComponentOverrideContext.__assign(
          { id: genericComponentOverrideContext.ST_ROOT_ID, ref: rootDiv },
          { children: shadowRoot && reactDom.createPortal(children, shadowRoot) }
        )
      );
    }
    function WithOrWithoutShadowDom(_a2) {
      var children = _a2.children, useShadowDom = _a2.useShadowDom;
      if (useShadowDom === false) {
        return jsxRuntime.jsxs(
          "div",
          genericComponentOverrideContext.__assign(
            { id: genericComponentOverrideContext.ST_ROOT_ID },
            { children: [children, jsxRuntime.jsx(DisableAutoFillInput, {})] }
          )
        );
      }
      return jsxRuntime.jsxs(WithShadowDom, { children: [children, jsxRuntime.jsx(DisableAutoFillInput, {})] });
    }
    function DisableAutoFillInput() {
      return jsxRuntime.jsx(
        "style",
        genericComponentOverrideContext.__assign(
          { type: "text/css" },
          {
            children: "input.supertokens-input:-webkit-autofill,input.supertokens-input:-webkit-autofill:focus,input.supertokens-input:-webkit-autofill:hover,select:-webkit-autofill,select:-webkit-autofill:focus,select:-webkit-autofill:hover,textarea:-webkit-autofill,textarea:-webkit-autofill:focus,textarea:-webkit-autofill:hover{transition:background-color 5000s ease-in-out 0s}"
          }
        )
      );
    }
    var defaultTranslationsCommon = {
      en: {
        AUTH_PAGE_HEADER_TITLE_SIGN_IN_AND_UP: "Sign Up / Sign In",
        AUTH_PAGE_HEADER_TITLE_SIGN_IN: "Sign In",
        AUTH_PAGE_HEADER_TITLE_SIGN_UP: "Sign Up",
        AUTH_PAGE_HEADER_TITLE_SIGN_IN_UP_TO_APP: " to continue to ",
        AUTH_PAGE_HEADER_SUBTITLE_SIGN_IN_START: "Not registered yet?",
        AUTH_PAGE_HEADER_SUBTITLE_SIGN_IN_SIGN_UP_LINK: "Sign Up",
        AUTH_PAGE_HEADER_SUBTITLE_SIGN_IN_END: "",
        AUTH_PAGE_HEADER_SUBTITLE_SIGN_UP_START: "Already have an account?",
        AUTH_PAGE_HEADER_SUBTITLE_SIGN_UP_SIGN_IN_LINK: "Sign In",
        AUTH_PAGE_HEADER_SUBTITLE_SIGN_UP_END: "",
        AUTH_PAGE_FOOTER_START: "By continuing, you agree to our ",
        AUTH_PAGE_FOOTER_TOS: "Terms of Service",
        AUTH_PAGE_FOOTER_AND: " and ",
        AUTH_PAGE_FOOTER_PP: "Privacy Policy",
        AUTH_PAGE_FOOTER_END: "",
        DIVIDER_OR: "or",
        BRANDING_POWERED_BY_START: "Powered by ",
        BRANDING_POWERED_BY_END: "",
        SOMETHING_WENT_WRONG_ERROR: "Something went wrong. Please try again.",
        SOMETHING_WENT_WRONG_ERROR_RELOAD: "Something went wrong. Please try again later or reload the page."
      }
    };
    var SessionContext = React__default.default.createContext({
      loading: true,
      isDefault: true
    });
    var useSessionContext = function() {
      var ctx = React__default.default.useContext(SessionContext);
      if (ctx.isDefault === true) {
        throw new Error("Cannot use useSessionContext outside auth wrapper components.");
      }
      return ctx;
    };
    var _a = genericComponentOverrideContext.createGenericComponentsOverrideContext();
    var useContext = _a[0];
    var Provider = _a[1];
    function SuperTokensBranding() {
      var t = translationContext.useTranslation();
      return jsxRuntime.jsxs(
        "a",
        genericComponentOverrideContext.__assign(
          {
            "data-supertokens": "superTokensBranding",
            href: "https://supertokens.com?utm_campaign=poweredby",
            target: "_blank"
          },
          {
            children: [
              t("BRANDING_POWERED_BY_START"),
              jsxRuntime.jsx("strong", { children: "SuperTokens" }),
              t("BRANDING_POWERED_BY_END")
            ]
          }
        )
      );
    }
    function UserContextWrapper(props) {
      if (props.userContext !== void 0) {
        return jsxRuntime.jsx(
          UserContextProvider,
          genericComponentOverrideContext.__assign({ userContext: props.userContext }, { children: props.children })
        );
      }
      return jsxRuntime.jsx(UserContextContext.Consumer, {
        children: function(value) {
          if (value === void 0) {
            return jsxRuntime.jsx(UserContextProvider, { children: props.children });
          }
          return props.children;
        }
      });
    }
    function GeneralError(_a2) {
      var error = _a2.error;
      var t = translationContext.useTranslation();
      return jsxRuntime.jsx(
        "div",
        genericComponentOverrideContext.__assign({ "data-supertokens": "generalError" }, { children: t(error) })
      );
    }
    var styles = '[data-supertokens~="container"] {\n    --palette-background: 255, 255, 255;\n    --palette-inputBackground: 250, 250, 250;\n    --palette-inputBorder: 224, 224, 224;\n    --palette-primary: 28, 34, 42;\n    --palette-primaryBorder: 45, 54, 68;\n    --palette-success: 65, 167, 0;\n    --palette-successBackground: 217, 255, 191;\n    --palette-error: 255, 23, 23;\n    --palette-errorBackground: 255, 241, 235;\n    --palette-textTitle: 0, 0, 0;\n    --palette-textLabel: 0, 0, 0;\n    --palette-textInput: 0, 0, 0;\n    --palette-textPrimary: 128, 128, 128;\n    --palette-textLink: 0, 122, 255;\n    --palette-buttonText: 255, 255, 255;\n    --palette-textGray: 54, 54, 54;\n    --palette-superTokensBrandingBackground: 242, 245, 246;\n    --palette-superTokensBrandingText: 173, 189, 196;\n    --palette-buttonGreyedOut: 221, 221, 221;\n    --palette-caution: 124, 96, 62;\n    --palette-errorDark: 207, 54, 68;\n\n    --font-size-0: 12px;\n    --font-size-1: 14px;\n    --font-size-2: 16px;\n    --font-size-3: 19px;\n    --font-size-4: 24px;\n    --font-size-5: 28px;\n}\n/*\n * Default styles.\n */\n@keyframes slideTop {\n    0% {\n        transform: translateY(-5px);\n    }\n    100% {\n        transform: translateY(0px);\n    }\n}\n@keyframes swing-in-top-fwd {\n    0% {\n        transform: rotateX(-100deg);\n        transform-origin: top;\n        opacity: 0;\n    }\n    100% {\n        transform: rotateX(0deg);\n        transform-origin: top;\n        opacity: 1;\n    }\n}\n[data-supertokens~="container"] {\n    font-family: "Arial", sans-serif;\n    margin: 12px auto;\n    margin-top: 26px;\n    margin-bottom: 26px;\n    width: 420px;\n    text-align: center;\n    border-radius: 8px;\n    box-shadow: 1px 1px 10px rgba(0, 0, 0, 0.16);\n    background-color: rgb(var(--palette-background));\n}\n@media (max-width: 440px) {\n    [data-supertokens~="container"] {\n        width: 95vw;\n    }\n}\n[data-supertokens~="row"] {\n    margin: 0 auto;\n    width: 76%;\n    padding-top: 30px;\n    padding-bottom: 10px;\n}\n[data-supertokens~="superTokensBranding"] {\n    display: block;\n    margin: 10px auto 0;\n    background: rgb(var(--palette-superTokensBrandingBackground));\n    color: rgb(var(--palette-superTokensBrandingText));\n    text-decoration: none;\n    width: -webkit-fit-content;\n    width: fit-content;\n    border-radius: 6px 6px 0 0;\n    padding: 4px 9px;\n    font-weight: 400;\n    font-size: var(--font-size-0);\n    letter-spacing: 0.4px;\n}\n[data-supertokens~="generalError"] {\n    background: rgb(var(--palette-errorBackground));\n    padding-top: 10px;\n    padding-bottom: 10px;\n    margin-bottom: 10px;\n    margin-top: 24px;\n    padding-left: 18px;\n    padding-right: 18px;\n    letter-spacing: 0.2px;\n    font-size: var(--font-size-1);\n    border-radius: 8px;\n    color: rgb(var(--palette-error));\n    animation: swing-in-top-fwd 1s cubic-bezier(0.175, 0.885, 0.32, 1.275) both;\n    word-wrap: break-word;\n}\n[data-supertokens~="headerTitle"] {\n    font-size: var(--font-size-4);\n    line-height: 27.6px;\n    letter-spacing: 0.58px;\n    font-weight: 700;\n    margin-bottom: 20px;\n    color: rgb(var(--palette-textTitle));\n}\n[data-supertokens~="headerSubtitle"] {\n    font-weight: 400;\n    color: rgb(var(--palette-textGray));\n    margin-bottom: 21px;\n}\n[data-supertokens~="headerSubtitle"][data-supertokens~="secondaryText"] {\n    color: rgb(var(--palette-textGray));\n    font-weight: 400;\n}\n[data-supertokens~="privacyPolicyAndTermsAndConditions"] {\n    max-width: 300px;\n    margin-top: 10px;\n}\n[data-supertokens~="privacyPolicyAndTermsAndConditions"] a {\n    line-height: 21px;\n}\n/* TODO: split the link style into separate things*/\n/* We add this before primary and secondary text, because if they are applied to the same element the other ones take priority */\n[data-supertokens~="link"] {\n    padding-left: 3px;\n    padding-right: 3px;\n    color: rgb(var(--palette-textLink));\n    font-size: var(--font-size-1);\n    cursor: pointer;\n    letter-spacing: 0.16px;\n    line-height: 26px;\n}\n[data-supertokens~="primaryText"] {\n    font-size: var(--font-size-2);\n    font-weight: 400;\n    letter-spacing: 0.4px;\n    line-height: 21px;\n    color: rgb(var(--palette-textLabel));\n}\n[data-supertokens~="secondaryText"] {\n    font-size: var(--font-size-1);\n    font-weight: 400;\n    letter-spacing: 0.4px;\n    color: rgb(var(--palette-textPrimary));\n}\n[data-supertokens~="secondaryText"] strong {\n    font-weight: 600;\n}\n[data-supertokens~="divider"] {\n    margin-top: 1.5em;\n    margin-bottom: 1.5em;\n    border-bottom: 0.3px solid #dddddd;\n    align-items: center;\n    padding-bottom: 5px;\n    flex: 3 3;\n}\n[data-supertokens~="headerTinyTitle"] {\n    margin-top: 24px;\n    font-size: var(--font-size-5);\n    letter-spacing: 1.1px;\n    font-weight: 700;\n    line-height: 28px;\n}\n[data-supertokens~="secondaryLinkWithArrow"] {\n    margin-top: 10px;\n    margin-bottom: 30px;\n    cursor: pointer;\n}\n[data-supertokens~="secondaryLinkWithArrow"]:hover {\n    position: relative;\n    left: 2px;\n    word-spacing: 4px;\n}\n[data-supertokens~="generalSuccess"] {\n    color: rgb(var(--palette-success));\n    font-size: var(--font-size-1);\n    background: rgb(var(--palette-successBackground));\n    animation: swing-in-top-fwd 1s cubic-bezier(0.175, 0.885, 0.32, 1.275) both;\n    padding: 9px 15px 9px 15px;\n    border-radius: 6px;\n    display: inline-block;\n}\n[data-supertokens~="spinner"] {\n    width: 80px;\n    height: auto;\n    padding-top: 20px;\n    padding-bottom: 40px;\n    margin: 0 auto;\n}\n[data-supertokens~="error"] {\n    color: rgb(var(--palette-error));\n}\n[data-supertokens~="linkButton"] {\n    font-family: "Arial", sans-serif;\n    background-color: transparent;\n    border: 0;\n}\n[data-supertokens~="secondaryLinkWithLeftArrow"] {\n    color: rgb(var(--palette-textGray));\n    font-weight: 400;\n    margin-top: 10px;\n    margin-bottom: 40px;\n    cursor: pointer;\n}\n[data-supertokens~="secondaryLinkWithLeftArrow"] svg {\n    margin-right: 0.3em;\n}\n[data-supertokens~="secondaryLinkWithLeftArrow"]:hover svg {\n    position: relative;\n    left: -4px;\n}\n[data-supertokens~="button"] {\n    font-family: "Arial", sans-serif;\n    background-color: rgb(var(--palette-primary));\n    color: rgb(var(--palette-buttonText));\n    width: 100%;\n    height: 34px;\n    font-weight: 600;\n    border-width: 1px;\n    border-style: solid;\n    border-radius: 6px;\n    border-color: rgb(var(--palette-primaryBorder));\n    background-position: center;\n    transition: all 0.4s;\n    background-size: 12000%;\n    cursor: pointer;\n}\n[data-supertokens~="buttonGreyedOut"] {\n    background-color: rgb(var(--palette-buttonGreyedOut));\n    border-color: rgb(var(--palette-buttonGreyedOut));\n}\n[data-supertokens~="buttonWithIcon"] {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    gap: 8px;\n}\n[data-supertokens~="button"]:disabled {\n    border: none;\n    cursor: no-drop;\n}\n[data-supertokens~="button"]:active {\n    outline: none;\n    transition: all 0s;\n    background-size: 100%;\n    filter: brightness(0.85);\n}\n[data-supertokens~="button"]:focus {\n    outline: none;\n}\n[data-supertokens~="backButtonCommon"] {\n    width: 16px;\n    height: 13px;\n}\n[data-supertokens~="backButton"] {\n    cursor: pointer;\n    border: none;\n    background-color: transparent;\n    padding: 0px;\n}\n[data-supertokens~="backButtonPlaceholder"] {\n    display: block;\n}\n[data-supertokens~="delayedRender"] {\n    animation-duration: 0.1s;\n    animation-name: animate-fade;\n    animation-delay: 0.2s;\n    animation-fill-mode: backwards;\n}\n@keyframes animate-fade {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n[data-supertokens~="footerLinkGroupVert"] {\n    display: flex;\n    flex-direction: column;\n    margin-top: 10px;\n    gap: 24px;\n}\n[data-supertokens~="footerLinkGroupVert"] > div {\n    cursor: pointer;\n    margin: 0;\n}\n[data-supertokens~="footerLinkGroupVert"] [data-supertokens~="secondaryText"] {\n    font-weight: 400;\n}\n[data-supertokens~="footerLinkGroupVert"] [data-supertokens~="secondaryLinkWithLeftArrow"] {\n    font-weight: 400;\n    position: relative;\n    left: -6px; /* half the width of the left arrow */\n}\n@media (max-width: 360px) {\n    [data-supertokens~="footerLinkGroupVert"] {\n        flex-direction: column;\n    }\n    [data-supertokens~="footerLinkGroupVert"] > div {\n        margin: 0 auto;\n    }\n}\n[data-supertokens~="footerLinkGroupVert"] div:only-child {\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 14px;\n}\n[data-supertokens~="withBackButton"] {\n    position: relative;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n[data-supertokens~="dividerWithOr"] {\n    padding-top: 5px;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    color: rgb(var(--palette-textPrimary));\n}\n[data-supertokens~="dividerText"] {\n    flex: 1 1;\n    font-weight: 400;\n    font-size: var(--font-size-1);\n}\n[data-supertokens~="formLabelWithLinkWrapper"] {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n[data-supertokens~="formLabelLinkBtn"] {\n    width: auto;\n    margin-top: 0;\n    line-height: 24px;\n    font-size: var(--font-size-0);\n}\n[data-supertokens~="formLabelLinkBtn"]:hover {\n    text-decoration: underline;\n}\n[data-supertokens~="formLabelLinkBtn"]:disabled {\n    color: rgb(var(--palette-textPrimary));\n    cursor: default;\n    text-decoration: none;\n}\n[data-supertokens~="authComponentList"] {\n    padding-bottom: 20px;\n}\n[data-supertokens~="authPageTitleOAuthClient"] {\n    color: rgb(var(--palette-textGray));\n    font-size: var(--font-size-1);\n    font-weight: 400;\n    margin: 10px 0 25px;\n}\n[data-supertokens~="authPageTitleOAuthClientUrl"] {\n    text-decoration: none;\n}\n[data-supertokens~="authPageTitleOAuthClientLogo"] {\n    width: 44px;\n    height: 44px;\n    margin-bottom: 10px;\n}\n[data-supertokens~="authPageTitleOAuthClient"] [data-supertokens~="authPageTitleOAuthClientName"] {\n    color: rgb(var(--palette-textTitle));\n}\n[data-supertokens~="buttonWithArrow"] {\n    border-radius: 6px;\n    border: 1px solid #d0d5dd;\n    width: 100%;\n    color: rgb(var(--palette-textGray));\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    gap: 5px;\n    margin: 24px 0;\n    min-height: 48px;\n    cursor: pointer;\n}\n[data-supertokens~="buttonWithArrow"]:hover {\n    background-color: rgb(var(--palette-inputBackground));\n}\n[data-supertokens~="buttonWithArrow"] [data-supertokens~="secondaryText"] {\n    font-weight: 700;\n    font-size: var(--font-size-2);\n    color: rgb(var(--palette-textGray));\n    margin: 0;\n}\n[data-supertokens~="buttonWithArrow"]:hover [data-supertokens~="secondaryLinkWithRightArrow"] ~ svg {\n    position: relative;\n    left: 2px;\n}\n[data-supertokens~="buttonWithArrow"]:hover [data-supertokens~="secondaryLinkWithLeftArrow"] svg {\n    position: relative;\n    left: -2px;\n}\n[data-supertokens~="buttonWithArrow"] [data-supertokens~="secondaryLinkWithLeftArrow"] {\n    display: flex;\n    align-items: center;\n}\n';
    var ThemeBase = function(_a2) {
      var children = _a2.children, userStyles = _a2.userStyles;
      return jsxRuntime.jsxs(React.Fragment, {
        children: [children, jsxRuntime.jsxs("style", { children: [styles, userStyles.join("\n")] })]
      });
    };
    var AuthPageComponentList = withOverride("AuthPageComponentList", function AuthPageComponentList2(props) {
      var t = translationContext.useTranslation();
      var list = [props.authComponents[0]];
      var _loop_1 = function(i2) {
        list.push(function() {
          return jsxRuntime.jsxs(
            "div",
            genericComponentOverrideContext.__assign(
              { "data-supertokens": "dividerWithOr" },
              {
                children: [
                  jsxRuntime.jsx("div", { "data-supertokens": "divider" }),
                  jsxRuntime.jsx(
                    "div",
                    genericComponentOverrideContext.__assign(
                      { "data-supertokens": "dividerText" },
                      { children: t("DIVIDER_OR") }
                    )
                  ),
                  jsxRuntime.jsx("div", { "data-supertokens": "divider" })
                ]
              }
            ),
            "divider-".concat(i2)
          );
        });
        list.push(props.authComponents[i2]);
      };
      for (var i = 1; i < props.authComponents.length; ++i) {
        _loop_1(i);
      }
      return jsxRuntime.jsx(
        "div",
        genericComponentOverrideContext.__assign(
          { "data-supertokens": "authComponentList" },
          {
            children: list.map(function(i2) {
              return i2(genericComponentOverrideContext.__assign({}, props));
            })
          }
        )
      );
    });
    var AuthPageFooter = withOverride("AuthPageFooter", function AuthPageFooter2(_a2) {
      var hasSeparateSignUpView = _a2.hasSeparateSignUpView, isSignUp = _a2.isSignUp, termsOfServiceLink = _a2.termsOfServiceLink, privacyPolicyLink = _a2.privacyPolicyLink;
      var t = translationContext.useTranslation();
      if (termsOfServiceLink === void 0 && privacyPolicyLink === void 0) {
        return null;
      }
      if (hasSeparateSignUpView && !isSignUp) {
        return null;
      }
      return jsxRuntime.jsxs(
        "div",
        genericComponentOverrideContext.__assign(
          { "data-supertokens": "secondaryText privacyPolicyAndTermsAndConditions" },
          {
            children: [
              t("AUTH_PAGE_FOOTER_START"),
              termsOfServiceLink !== void 0 && jsxRuntime.jsx(
                "a",
                genericComponentOverrideContext.__assign(
                  {
                    "data-supertokens": "link",
                    href: termsOfServiceLink,
                    target: "_blank",
                    rel: "noopener noreferer"
                  },
                  { children: t("AUTH_PAGE_FOOTER_TOS") }
                )
              ),
              termsOfServiceLink !== void 0 && privacyPolicyLink !== void 0 && t("AUTH_PAGE_FOOTER_AND"),
              privacyPolicyLink !== void 0 && jsxRuntime.jsx(
                "a",
                genericComponentOverrideContext.__assign(
                  {
                    "data-supertokens": "link",
                    href: privacyPolicyLink,
                    target: "_blank",
                    rel: "noopener noreferer"
                  },
                  { children: t("AUTH_PAGE_FOOTER_PP") }
                )
              ),
              t("AUTH_PAGE_FOOTER_END")
            ]
          }
        )
      );
    });
    function HeavyArrowLeftIcon(_a2) {
      var color = _a2.color;
      return jsxRuntime.jsx(
        "svg",
        genericComponentOverrideContext.__assign(
          {
            xmlns: "http://www.w3.org/2000/svg",
            width: "16",
            height: "13",
            viewBox: "0 0 16 13",
            "data-supertokens": "heavyArrowLeftIcon"
          },
          {
            children: jsxRuntime.jsx("path", {
              fill: color,
              d: "M13 6.8h.022H3.8l2.9 2.9a.761.761 0 0 1 0 1.07l-.451.451a.754.754 0 0 1-1.064 0L.22 6.254a.759.759 0 0 1 0-1.068L5.186.22a.755.755 0 0 1 1.064 0l.45.451a.746.746 0 0 1 .22.532.724.724 0 0 1-.22.522l-2.93 2.92h9.24a.781.781 0 0 1 .764.773v.638A.766.766 0 0 1 13 6.8z",
              transform: "translate(1.182 .708)"
            })
          }
        )
      );
    }
    function BackButton(_a2) {
      var onClick = _a2.onClick;
      return jsxRuntime.jsx(
        "button",
        genericComponentOverrideContext.__assign(
          { onClick, "data-supertokens": "backButton backButtonCommon" },
          { children: jsxRuntime.jsx(HeavyArrowLeftIcon, { color: "rgb(var(--palette-textTitle))" }) }
        )
      );
    }
    var AuthPageHeader = withOverride("AuthPageHeader", function AuthPageHeader2(_a2) {
      var onSignInUpSwitcherClick = _a2.onSignInUpSwitcherClick, hasSeparateSignUpView = _a2.hasSeparateSignUpView, isSignUp = _a2.isSignUp, showBackButton = _a2.showBackButton, resetFactorList = _a2.resetFactorList, oauth2ClientInfo = _a2.oauth2ClientInfo, headerLabel = _a2.headerLabel, _b = _a2.hideSignInSwitcher, hideSignInSwitcher = _b === void 0 ? false : _b;
      var t = translationContext.useTranslation();
      return jsxRuntime.jsxs(React.Fragment, {
        children: [
          (oauth2ClientInfo === null || oauth2ClientInfo === void 0 ? void 0 : oauth2ClientInfo.logoUri) && jsxRuntime.jsx("img", {
            src: oauth2ClientInfo.logoUri,
            alt: oauth2ClientInfo.clientName,
            "data-supertokens": "authPageTitleOAuthClientLogo"
          }),
          jsxRuntime.jsxs(
            "div",
            genericComponentOverrideContext.__assign(
              { "data-supertokens": "headerTitle withBackButton" },
              {
                children: [
                  showBackButton ? jsxRuntime.jsx(BackButton, { onClick: resetFactorList }) : jsxRuntime.jsx("span", {
                    "data-supertokens": "backButtonPlaceholder backButtonCommon"
                  }),
                  headerLabel !== void 0 ? t(headerLabel) : !hasSeparateSignUpView ? t("AUTH_PAGE_HEADER_TITLE_SIGN_IN_AND_UP") : isSignUp ? t("AUTH_PAGE_HEADER_TITLE_SIGN_UP") : t("AUTH_PAGE_HEADER_TITLE_SIGN_IN"),
                  jsxRuntime.jsx("span", { "data-supertokens": "backButtonPlaceholder backButtonCommon" })
                ]
              }
            )
          ),
          oauth2ClientInfo && oauth2ClientInfo.clientName !== void 0 && oauth2ClientInfo.clientName.length > 0 && jsxRuntime.jsxs(
            "div",
            genericComponentOverrideContext.__assign(
              { "data-supertokens": "authPageTitleOAuthClient" },
              {
                children: [
                  t("AUTH_PAGE_HEADER_TITLE_SIGN_IN_UP_TO_APP"),
                  oauth2ClientInfo.clientUri !== void 0 ? jsxRuntime.jsx(
                    "a",
                    genericComponentOverrideContext.__assign(
                      {
                        "data-supertokens": "authPageTitleOAuthClientUrl link",
                        href: oauth2ClientInfo.clientUri
                      },
                      { children: oauth2ClientInfo.clientName }
                    )
                  ) : jsxRuntime.jsx(
                    "span",
                    genericComponentOverrideContext.__assign(
                      { "data-supertokens": "authPageTitleOAuthClientName" },
                      { children: oauth2ClientInfo.clientName }
                    )
                  )
                ]
              }
            )
          ),
          !hideSignInSwitcher && hasSeparateSignUpView && (!isSignUp ? jsxRuntime.jsxs(
            "div",
            genericComponentOverrideContext.__assign(
              { "data-supertokens": "headerSubtitle secondaryText" },
              {
                children: [
                  t("AUTH_PAGE_HEADER_SUBTITLE_SIGN_IN_START"),
                  jsxRuntime.jsx(
                    "span",
                    genericComponentOverrideContext.__assign(
                      { "data-supertokens": "link", onClick: onSignInUpSwitcherClick },
                      { children: t("AUTH_PAGE_HEADER_SUBTITLE_SIGN_IN_SIGN_UP_LINK") }
                    )
                  ),
                  t("AUTH_PAGE_HEADER_SUBTITLE_SIGN_IN_END")
                ]
              }
            )
          ) : jsxRuntime.jsxs(
            "div",
            genericComponentOverrideContext.__assign(
              { "data-supertokens": "headerSubtitle secondaryText" },
              {
                children: [
                  t("AUTH_PAGE_HEADER_SUBTITLE_SIGN_UP_START"),
                  jsxRuntime.jsx(
                    "span",
                    genericComponentOverrideContext.__assign(
                      { "data-supertokens": "link", onClick: onSignInUpSwitcherClick },
                      { children: t("AUTH_PAGE_HEADER_SUBTITLE_SIGN_UP_SIGN_IN_LINK") }
                    )
                  ),
                  t("AUTH_PAGE_HEADER_SUBTITLE_SIGN_UP_END")
                ]
              }
            )
          )),
          jsxRuntime.jsx("div", { "data-supertokens": "divider" })
        ]
      });
    });
    function AuthPageTheme(props) {
      if (props.fullPageCompWithPreloadedInfo) {
        return jsxRuntime.jsx(jsxRuntime.Fragment, {
          children: props.fullPageCompWithPreloadedInfo.component(
            genericComponentOverrideContext.__assign(genericComponentOverrideContext.__assign({}, props), {
              preloadInfo: props.fullPageCompWithPreloadedInfo.preloadInfo,
              showBackButton: props.showBackButton
            })
          )
        });
      }
      return jsxRuntime.jsxs(
        "div",
        genericComponentOverrideContext.__assign(
          {
            "data-supertokens": "container authPage ".concat(
              props.factorIds.length > 1 ? "multiFactor" : "singleFactor"
            )
          },
          {
            children: [
              jsxRuntime.jsxs(
                "div",
                genericComponentOverrideContext.__assign(
                  { "data-supertokens": "row" },
                  {
                    children: [
                      jsxRuntime.jsx(AuthPageHeader, {
                        factorIds: props.factorIds,
                        isSignUp: props.isSignUp,
                        onSignInUpSwitcherClick: props.onSignInUpSwitcherClick,
                        hasSeparateSignUpView: props.hasSeparateSignUpView,
                        resetFactorList: props.resetFactorList,
                        showBackButton: props.showBackButton,
                        oauth2ClientInfo: props.oauth2ClientInfo
                      }),
                      props.error !== void 0 && jsxRuntime.jsx(GeneralError, { error: props.error }),
                      jsxRuntime.jsx(
                        AuthPageComponentList,
                        genericComponentOverrideContext.__assign({}, props)
                      ),
                      jsxRuntime.jsx(AuthPageFooter, {
                        factorIds: props.factorIds,
                        isSignUp: props.isSignUp,
                        hasSeparateSignUpView: props.hasSeparateSignUpView,
                        privacyPolicyLink: props.privacyPolicyLink,
                        termsOfServiceLink: props.termsOfServiceLink
                      })
                    ]
                  }
                )
              ),
              jsxRuntime.jsx(SuperTokensBranding, {})
            ]
          }
        )
      );
    }
    function AuthPageThemeWrapper(props) {
      var rootStyle = genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().rootStyle;
      return jsxRuntime.jsx(
        UserContextWrapper,
        genericComponentOverrideContext.__assign(
          { userContext: props.userContext },
          {
            children: jsxRuntime.jsx(
              ThemeBase,
              genericComponentOverrideContext.__assign(
                { userStyles: [rootStyle] },
                { children: jsxRuntime.jsx(AuthPageTheme, genericComponentOverrideContext.__assign({}, props)) }
              )
            )
          }
        )
      );
    }
    var errorQSMap = {
      signin: "SOMETHING_WENT_WRONG_ERROR",
      no_email_present: "THIRD_PARTY_ERROR_NO_EMAIL",
      restart_link: "ERROR_SIGN_IN_UP_LINK"
    };
    var AuthPageWrapper = function(props) {
      var authRecipeComponentOverrides = useContext();
      return jsxRuntime.jsx(
        UserContextProvider,
        genericComponentOverrideContext.__assign(
          { userContext: props.userContext },
          {
            children: jsxRuntime.jsx(
              SessionAuthWrapper,
              genericComponentOverrideContext.__assign(
                { requireAuth: false, doRedirection: false },
                {
                  children: jsxRuntime.jsx(
                    ComponentOverrideContext.Provider,
                    genericComponentOverrideContext.__assign(
                      { value: authRecipeComponentOverrides },
                      {
                        children: jsxRuntime.jsx(
                          AuthPageInner,
                          genericComponentOverrideContext.__assign({}, props)
                        )
                      }
                    )
                  )
                }
              )
            )
          }
        )
      );
    };
    var AuthPageInner = function(props) {
      var _a2, _b, _c, _d, _e;
      if (props.factors !== void 0 && props.factors.length === 0) {
        throw new Error("The factors array cannot be empty");
      }
      var windowHandler$1 = windowHandler.WindowHandlerReference.getReferenceOrThrow().windowHandler;
      var search = new URLSearchParams(windowHandler$1.location.getSearch());
      var showStringFromQS = search.get("show");
      var isSignUpFromQS = props.useSignUpStateFromQueryString !== true || showStringFromQS === null ? void 0 : showStringFromQS === "signup";
      var errorFromQS = search.get("error") !== null ? (_b = (_a2 = search.get("message")) !== null && _a2 !== void 0 ? _a2 : search.get("error")) !== null && _b !== void 0 ? _b : void 0 : void 0;
      errorFromQS = errorFromQS !== void 0 ? (_c = errorQSMap[errorFromQS]) !== null && _c !== void 0 ? _c : errorFromQS : void 0;
      var showStringFromQSRef = React.useRef(showStringFromQS);
      var errorFromQSRef = React.useRef(errorFromQS);
      var loginChallenge = search.get("loginChallenge");
      var forceFreshAuth = search.get("forceFreshAuth") === "true";
      var sessionContext = useSessionContext();
      var userContext = useUserContext();
      var rethrowInRender = genericComponentOverrideContext.useRethrowInRender();
      var _f = React.useState(void 0), loadedDynamicLoginMethods = _f[0], setLoadedDynamicLoginMethods = _f[1];
      var _g = React.useState(void 0), oauth2ClientInfo = _g[0], setOAuth2ClientInfo = _g[1];
      var _h = React.useState(errorFromQS), error = _h[0], setError = _h[1];
      var _j = React.useState(false), sessionLoadedAndNotRedirecting = _j[0], setSessionLoadedAndNotRedirecting = _j[1];
      var st = genericComponentOverrideContext.SuperTokens.getInstanceOrThrow();
      var _k = React.useState(props.factors), factorList = _k[0], setFactorList = _k[1];
      var _l = React.useState(
        (_e = (_d = props.isSignUp) !== null && _d !== void 0 ? _d : isSignUpFromQS) !== null && _e !== void 0 ? _e : st.defaultToSignUp
      ), isSignUp = _l[0], setIsSignUp = _l[1];
      var _m = React.useState(0), rebuildReqCount = _m[0], setRebuildReqCount = _m[1];
      var lastBuild = React.useRef({ buildReq: void 0 });
      React.useEffect(function() {
        if (props.useSignUpStateFromQueryString && showStringFromQSRef.current !== showStringFromQS) {
          var isSignUpFromQS_1 = props.useSignUpStateFromQueryString !== true || showStringFromQS === null ? void 0 : showStringFromQS === "signup";
          showStringFromQSRef.current = showStringFromQS;
          var newIsSignUpVal = isSignUpFromQS_1 !== null && isSignUpFromQS_1 !== void 0 ? isSignUpFromQS_1 : st.defaultToSignUp;
          if (isSignUp !== newIsSignUpVal) {
            setIsSignUp(newIsSignUpVal);
            setRebuildReqCount(function(v) {
              return v + 1;
            });
          }
        }
      });
      React.useEffect(function() {
        if (errorFromQSRef.current !== errorFromQS) {
          errorFromQSRef.current = errorFromQS;
          setError(errorFromQS);
        }
      });
      var onSignInUpSwitcherClick = React.useCallback(
        function() {
          if (props.useSignUpStateFromQueryString === true) {
            genericComponentOverrideContext.updateQueryParam("show", isSignUp ? "signin" : "signup");
          }
          setError(void 0);
          setIsSignUp(!isSignUp);
          setRebuildReqCount(function(v) {
            return v + 1;
          });
        },
        [isSignUp, setIsSignUp, setRebuildReqCount, setError, props.useSignUpStateFromQueryString]
      );
      React.useEffect(
        function() {
          if (loadedDynamicLoginMethods) {
            return;
          }
          genericComponentOverrideContext.Multitenancy.getInstanceOrThrow().getCurrentDynamicLoginMethods({ userContext }).then(
            function(loginMethods) {
              return setLoadedDynamicLoginMethods(loginMethods);
            },
            function(err) {
              return rethrowInRender(err);
            }
          );
        },
        [loadedDynamicLoginMethods, setLoadedDynamicLoginMethods]
      );
      genericComponentOverrideContext.useOnMountAPICall(
        function() {
          return genericComponentOverrideContext.__awaiter(void 0, void 0, void 0, function() {
            var oauth2Recipe;
            return genericComponentOverrideContext.__generator(this, function(_a3) {
              if (oauth2ClientInfo) {
                return [
                  2
                  /*return*/
                ];
              }
              oauth2Recipe = recipe.OAuth2Provider.getInstance();
              if (oauth2Recipe !== void 0 && loginChallenge !== null) {
                return [
                  2,
                  oauth2Recipe.webJSRecipe.getLoginChallengeInfo({
                    loginChallenge,
                    userContext
                  })
                ];
              }
              return [2, void 0];
            });
          });
        },
        function(info) {
          return genericComponentOverrideContext.__awaiter(void 0, void 0, void 0, function() {
            return genericComponentOverrideContext.__generator(this, function(_a3) {
              if (info !== void 0) {
                if (info.status === "OK") {
                  setOAuth2ClientInfo(info.info);
                } else {
                  setError("SOMETHING_WENT_WRONG_ERROR");
                }
              }
              return [
                2
                /*return*/
              ];
            });
          });
        },
        function() {
          genericComponentOverrideContext.clearQueryParams(["loginChallenge"]);
          setError("SOMETHING_WENT_WRONG_ERROR");
        }
      );
      React.useEffect(
        function() {
          if (sessionLoadedAndNotRedirecting) {
            return;
          }
          if (sessionContext.loading === false) {
            if (sessionContext.doesSessionExist) {
              if (props.onSessionAlreadyExists !== void 0) {
                props.onSessionAlreadyExists();
              } else if (props.redirectOnSessionExists !== false && !forceFreshAuth) {
                types.Session.getInstanceOrThrow().config.onHandleEvent({
                  action: "SESSION_ALREADY_EXISTS"
                });
                var oauth2Recipe_1 = recipe.OAuth2Provider.getInstance();
                if (loginChallenge !== null && oauth2Recipe_1 !== void 0) {
                  (function() {
                    return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
                      var frontendRedirectTo;
                      return genericComponentOverrideContext.__generator(this, function(_a3) {
                        switch (_a3.label) {
                          case 0:
                            return [
                              4,
                              oauth2Recipe_1.webJSRecipe.getRedirectURLToContinueOAuthFlow({
                                loginChallenge,
                                userContext
                              })
                            ];
                          case 1:
                            frontendRedirectTo = _a3.sent().frontendRedirectTo;
                            return [
                              2,
                              types.Session.getInstanceOrThrow().validateGlobalClaimsAndHandleSuccessRedirection(
                                {
                                  // We get here if the user was redirected to the auth screen with an already existing session
                                  // and a loginChallenge (we check the forceFreshAuth queryparam above)
                                  action: "SUCCESS_OAUTH2",
                                  frontendRedirectTo,
                                  // We can use these defaults, since this is not the result of a sign in/up call
                                  createdNewUser: false,
                                  isNewRecipeUser: false,
                                  newSessionCreated: false,
                                  tenantIdFromQueryParams: genericComponentOverrideContext.getTenantIdFromQueryParams(),
                                  recipeId: types.Session.RECIPE_ID
                                },
                                types.Session.RECIPE_ID,
                                genericComponentOverrideContext.getRedirectToPathFromURL(),
                                userContext,
                                props.navigate
                              )
                            ];
                        }
                      });
                    });
                  })().catch(rethrowInRender);
                } else {
                  void types.Session.getInstanceOrThrow().validateGlobalClaimsAndHandleSuccessRedirection(
                    void 0,
                    types.Session.RECIPE_ID,
                    genericComponentOverrideContext.getRedirectToPathFromURL(),
                    userContext,
                    props.navigate
                  ).catch(rethrowInRender);
                }
              } else {
                setSessionLoadedAndNotRedirecting(true);
              }
            } else {
              setSessionLoadedAndNotRedirecting(true);
            }
          }
        },
        [sessionContext.loading]
      );
      var _o = React.useState(), authComponentListInfo = _o[0], setAuthComponentListInfo = _o[1];
      var showUseAnotherLink = factorList !== void 0 && (props.factors === void 0 || props.factors.some(function(id) {
        return !factorList.includes(id);
      }));
      var stInstance = genericComponentOverrideContext.SuperTokens.getInstanceOrThrow();
      var privacyPolicyLink = stInstance.privacyPolicyLink;
      var termsOfServiceLink = stInstance.termsOfServiceLink;
      React.useEffect(
        function() {
          var abortCtl = new AbortController();
          if (lastBuild.current.buildReq === rebuildReqCount) {
            return;
          }
          if (sessionLoadedAndNotRedirecting && (loadedDynamicLoginMethods !== void 0 || !genericComponentOverrideContext.SuperTokens.usesDynamicLoginMethods)) {
            void buildAndSetChildProps(
              props.preBuiltUIList,
              loadedDynamicLoginMethods,
              userContext,
              factorList,
              isSignUp,
              setAuthComponentListInfo,
              abortCtl.signal
            ).then(function() {
              lastBuild.current.buildReq = rebuildReqCount;
            }, rethrowInRender);
          }
          return function() {
            abortCtl.abort();
          };
        },
        [
          sessionLoadedAndNotRedirecting,
          rebuildReqCount,
          setRebuildReqCount,
          props.preBuiltUIList,
          loadedDynamicLoginMethods,
          userContext,
          factorList,
          isSignUp,
          setAuthComponentListInfo,
          rethrowInRender
        ]
      );
      var onAuthSuccess = React.useCallback(
        function(ctx) {
          return genericComponentOverrideContext.__awaiter(void 0, void 0, void 0, function() {
            var oauth2Recipe, frontendRedirectTo;
            return genericComponentOverrideContext.__generator(this, function(_a3) {
              switch (_a3.label) {
                case 0:
                  oauth2Recipe = recipe.OAuth2Provider.getInstance();
                  if (loginChallenge === null || oauth2Recipe === void 0) {
                    return [
                      2,
                      types.Session.getInstanceOrThrow().validateGlobalClaimsAndHandleSuccessRedirection(
                        genericComponentOverrideContext.__assign(
                          genericComponentOverrideContext.__assign({}, ctx),
                          {
                            action: "SUCCESS",
                            tenantIdFromQueryParams: genericComponentOverrideContext.getTenantIdFromQueryParams(),
                            redirectToPath: genericComponentOverrideContext.getRedirectToPathFromURL()
                          }
                        ),
                        ctx.recipeId,
                        genericComponentOverrideContext.getRedirectToPathFromURL(),
                        userContext,
                        props.navigate
                      )
                    ];
                  }
                  return [
                    4,
                    oauth2Recipe.webJSRecipe.getRedirectURLToContinueOAuthFlow({
                      loginChallenge,
                      userContext
                    })
                  ];
                case 1:
                  frontendRedirectTo = _a3.sent().frontendRedirectTo;
                  return [
                    2,
                    types.Session.getInstanceOrThrow().validateGlobalClaimsAndHandleSuccessRedirection(
                      genericComponentOverrideContext.__assign(
                        genericComponentOverrideContext.__assign({}, ctx),
                        {
                          action: "SUCCESS_OAUTH2",
                          tenantIdFromQueryParams: genericComponentOverrideContext.getTenantIdFromQueryParams(),
                          frontendRedirectTo
                        }
                      ),
                      ctx.recipeId,
                      genericComponentOverrideContext.getRedirectToPathFromURL(),
                      userContext,
                      props.navigate
                    )
                  ];
              }
            });
          });
        },
        [loginChallenge]
      );
      var childProps = authComponentListInfo !== void 0 && (loginChallenge === null || oauth2ClientInfo !== void 0 || recipe.OAuth2Provider.getInstance() === void 0) ? genericComponentOverrideContext.__assign(
        genericComponentOverrideContext.__assign({}, authComponentListInfo),
        {
          oauth2ClientInfo,
          onAuthSuccess,
          error,
          onError: function(err) {
            setError(err);
          },
          clearError: function() {
            return setError(void 0);
          },
          navigate: props.navigate,
          onSignInUpSwitcherClick,
          privacyPolicyLink,
          rebuildAuthPage: function() {
            return setRebuildReqCount(function(v) {
              return v + 1;
            });
          },
          setFactorList: function(factorIds) {
            setFactorList(factorIds);
            setRebuildReqCount(function(v) {
              return v + 1;
            });
          },
          resetFactorList: function() {
            setFactorList(props.factors);
            setRebuildReqCount(function(v) {
              return v + 1;
            });
          },
          showBackButton: showUseAnotherLink,
          termsOfServiceLink,
          userContext
        }
      ) : void 0;
      var mergedTranslations = React.useMemo(
        function() {
          var res = defaultTranslationsCommon;
          if (authComponentListInfo !== void 0) {
            for (var _i = 0, _a3 = props.preBuiltUIList; _i < _a3.length; _i++) {
              var ui = _a3[_i];
              res = genericComponentOverrideContext.mergeObjects(res, ui.languageTranslations);
            }
          }
          res = genericComponentOverrideContext.mergeObjects(res, st.languageTranslations.userTranslationStore);
          return res;
        },
        [st.languageTranslations.userTranslationStore, authComponentListInfo]
      );
      if (childProps === void 0) {
        return jsxRuntime.jsx(DynamicLoginMethodsSpinner, {});
      } else {
        return jsxRuntime.jsx(
          DynamicLoginMethodsProvider,
          genericComponentOverrideContext.__assign(
            { value: loadedDynamicLoginMethods },
            {
              children: jsxRuntime.jsx(
                translationContext.TranslationContextProvider,
                genericComponentOverrideContext.__assign(
                  {
                    defaultLanguage: st.languageTranslations.defaultLanguage,
                    defaultStore: mergedTranslations,
                    translationControlEventSource: st.languageTranslations.translationEventSource,
                    userTranslationFunc: st.languageTranslations.userTranslationFunc
                  },
                  {
                    children: jsxRuntime.jsx(
                      WithOrWithoutShadowDom,
                      genericComponentOverrideContext.__assign(
                        { useShadowDom: st.useShadowDom },
                        {
                          children: jsxRuntime.jsxs(React.Fragment, {
                            children: [
                              props.children === void 0 && jsxRuntime.jsx(
                                AuthPageThemeWrapper,
                                genericComponentOverrideContext.__assign({}, childProps)
                              ),
                              props.children && React__default.default.Children.map(
                                props.children,
                                function(child) {
                                  if (React__default.default.isValidElement(child)) {
                                    return React__default.default.cloneElement(
                                      child,
                                      childProps
                                    );
                                  }
                                  return child;
                                }
                              )
                            ]
                          })
                        }
                      )
                    )
                  }
                )
              )
            }
          )
        );
      }
    };
    function buildAndSetChildProps(recipeRouters, loadedDynamicLoginMethods, userContext, factorListState, isSignUpState, setComponentListInfo, abort) {
      var _a2, _b, _c, _d, _e;
      return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
        var authRecipesInited, firstFactors, missingPreBuiltUIs, thirdPartyPreBuiltUI, hasSeparateSignUpView, isSignUp, authComps, _i, recipeRouters_1, ui, _f, authComps_1, a, preloadRes, partialAuthComps, selectedComponents, availableFactors, _g, partialAuthComps_1, comp, _h, _j, id, source;
        return genericComponentOverrideContext.__generator(this, function(_k) {
          switch (_k.label) {
            case 0:
              authRecipesInited = genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().recipeList.filter(function(recipe2) {
                return "firstFactorIds" in recipe2;
              });
              firstFactors = (_c = (_a2 = factorListState !== null && factorListState !== void 0 ? factorListState : loadedDynamicLoginMethods === null || loadedDynamicLoginMethods === void 0 ? void 0 : loadedDynamicLoginMethods.firstFactors) !== null && _a2 !== void 0 ? _a2 : (_b = recipe$1.MultiFactorAuth.getInstance()) === null || _b === void 0 ? void 0 : _b.config.firstFactors) !== null && _c !== void 0 ? _c : authRecipesInited.reduce(function(acc, recipe2) {
                return genericComponentOverrideContext.__spreadArray(
                  genericComponentOverrideContext.__spreadArray([], acc, true),
                  recipe2.getFirstFactorsForAuthPage(),
                  true
                );
              }, []);
              if (factorListState === void 0 && (loadedDynamicLoginMethods === null || loadedDynamicLoginMethods === void 0 ? void 0 : loadedDynamicLoginMethods.firstFactors) === void 0 && ((_d = recipe$1.MultiFactorAuth.getInstance()) === null || _d === void 0 ? void 0 : _d.config.firstFactors) === void 0) {
                missingPreBuiltUIs = authRecipesInited.filter(function(recipe2) {
                  return !recipeRouters.some(function(router) {
                    return router.recipeInstance.recipeID === recipe2.recipeID;
                  });
                });
                if (missingPreBuiltUIs.length > 0) {
                  throw new Error(
                    "Factor list not set but PreBuiltUI not added for ".concat(
                      missingPreBuiltUIs.map(function(r) {
                        return r.recipeID;
                      })
                    )
                  );
                }
              }
              if (firstFactors.length === 0) {
                throw new Error("There are no enabled factors to show");
              }
              if (firstFactors.includes(types.FactorIds.THIRDPARTY)) {
                thirdPartyPreBuiltUI = recipeRouters.find(function(r) {
                  return r.recipeInstance.recipeID === types.FactorIds.THIRDPARTY;
                });
                if (thirdPartyPreBuiltUI !== void 0) {
                  if (thirdPartyPreBuiltUI.recipeInstance.config.signInAndUpFeature.providers.length === 0 && (!genericComponentOverrideContext.SuperTokens.usesDynamicLoginMethods || loadedDynamicLoginMethods.thirdparty.providers.length === 0)) {
                    firstFactors = firstFactors.filter(function(f) {
                      return f !== types.FactorIds.THIRDPARTY;
                    });
                    if (firstFactors.length === 0) {
                      throw new Error(
                        "The only enabled first factor is thirdparty, but no providers were defined. Please define at least one provider."
                      );
                    }
                  }
                }
              }
              hasSeparateSignUpView = recipeRouters.some(function(ui2) {
                return ui2.requiresSignUpPage && ui2.recipeInstance.firstFactorIds.some(function(id2) {
                  return firstFactors.includes(id2);
                });
              });
              isSignUp = hasSeparateSignUpView && isSignUpState;
              authComps = [];
              for (_i = 0, recipeRouters_1 = recipeRouters; _i < recipeRouters_1.length; _i++) {
                ui = recipeRouters_1[_i];
                authComps.push.apply(authComps, ui.getAuthComponents());
              }
              _f = 0, authComps_1 = authComps;
              _k.label = 1;
            case 1:
              if (!(_f < authComps_1.length)) return [3, 4];
              a = authComps_1[_f];
              if (!(a.type === "FULL_PAGE")) return [3, 3];
              return [4, a.preloadInfoAndRunChecks(firstFactors, userContext, isSignUp)];
            case 2:
              preloadRes = _k.sent();
              if (abort.aborted) {
                return [
                  2
                  /*return*/
                ];
              }
              if (preloadRes.shouldDisplay) {
                setComponentListInfo({
                  authComponents: [],
                  fullPageCompWithPreloadedInfo: {
                    component: a.component,
                    preloadInfo: preloadRes.preloadInfo
                  },
                  isSignUp,
                  hasSeparateSignUpView,
                  factorIds: firstFactors
                });
                return [
                  2
                  /*return*/
                ];
              }
              _k.label = 3;
            case 3:
              _f++;
              return [3, 1];
            case 4:
              if (abort.aborted) {
                return [
                  2
                  /*return*/
                ];
              }
              partialAuthComps = authComps.filter(function(c) {
                return c.type !== "FULL_PAGE" && c.factorIds.every(function(id2) {
                  return firstFactors.includes(id2);
                });
              });
              partialAuthComps = partialAuthComps.filter(
                function(c) {
                  return c.type === "SIGN_IN_UP" || // sign in+up components show in all cases
                  (isSignUp ? c.type === "SIGN_UP" : c.type === "SIGN_IN");
                }
                // otherwise we check if the sign up state is appropriate
              );
              partialAuthComps.sort(function(a2, b) {
                return b.factorIds.length - a2.factorIds.length;
              });
              selectedComponents = utils.selectComponentsToCoverAllFirstFactors(partialAuthComps, firstFactors);
              if (selectedComponents === void 0) {
                availableFactors = /* @__PURE__ */ new Set();
                for (_g = 0, partialAuthComps_1 = partialAuthComps; _g < partialAuthComps_1.length; _g++) {
                  comp = partialAuthComps_1[_g];
                  for (_h = 0, _j = comp.factorIds; _h < _j.length; _h++) {
                    id = _j[_h];
                    availableFactors.add(id);
                  }
                }
                source = factorListState !== void 0 ? "local state or props" : (loadedDynamicLoginMethods === null || loadedDynamicLoginMethods === void 0 ? void 0 : loadedDynamicLoginMethods.firstFactors) !== void 0 ? "dynamic tenant configuration" : ((_e = recipe$1.MultiFactorAuth.getInstance()) === null || _e === void 0 ? void 0 : _e.config.firstFactors) !== void 0 ? "the config passed to the MFA recipe" : "all recipes initialized";
                throw new Error(
                  "Couldn't cover all first factors: ".concat(firstFactors.join(", "), " (from ").concat(source, "), available components: ").concat(Array.from(availableFactors).join(", "), ".\n") + "You may have missed adding a recipe into the list of prebuiltUIs passed to list of prebuiltUIs passed to getSuperTokensRoutesForReactRouterDom, canHandleRoute, handleRoute functions or the AuthPage component.\nAnother common error is adding a non-existent factor id into the list, e.g.: passwordless instead of otp-email/phone"
                );
              }
              setComponentListInfo({
                authComponents: selectedComponents.sort(function(a2, b) {
                  return a2.displayOrder - b.displayOrder;
                }).map(function(w) {
                  return w.component;
                }),
                factorIds: firstFactors,
                hasSeparateSignUpView,
                isSignUp
              });
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }
    var priorityOrder = [
      {
        rid: "thirdpartyemailpassword",
        includes: ["thirdparty", "emailpassword"],
        factorsProvided: [types.FactorIds.THIRDPARTY, types.FactorIds.EMAILPASSWORD]
      },
      {
        rid: "thirdpartypasswordless",
        includes: ["thirdparty", "passwordless"],
        factorsProvided: [
          types.FactorIds.THIRDPARTY,
          types.FactorIds.OTP_PHONE,
          types.FactorIds.OTP_EMAIL,
          types.FactorIds.LINK_PHONE,
          types.FactorIds.LINK_EMAIL
        ]
      },
      { rid: "emailpassword", includes: ["emailpassword"], factorsProvided: [types.FactorIds.EMAILPASSWORD] },
      {
        rid: "passwordless",
        includes: ["passwordless"],
        factorsProvided: [
          types.FactorIds.OTP_PHONE,
          types.FactorIds.OTP_EMAIL,
          types.FactorIds.LINK_PHONE,
          types.FactorIds.LINK_EMAIL
        ]
      },
      { rid: "thirdparty", includes: ["thirdparty"], factorsProvided: [types.FactorIds.THIRDPARTY] }
    ];
    function chooseComponentBasedOnFirstFactors(firstFactors, routeComponents) {
      var fallbackRid;
      var fallbackComponent;
      var _loop_1 = function(rid2, factorsProvided2) {
        if (firstFactors.every(function(factor) {
          return factorsProvided2.includes(factor);
        })) {
          var matchingComp = routeComponents.find(function(comp) {
            return comp.recipeID === rid2;
          });
          if (matchingComp) {
            fallbackRid = rid2;
            fallbackComponent = matchingComp;
            if (firstFactors.length === factorsProvided2.length) {
              genericComponentOverrideContext.logDebugMessage(
                "Rendering ".concat(rid2, " because it matches factors: ").concat(firstFactors, " exactly")
              );
              return { value: matchingComp };
            }
          }
        }
      };
      for (var _i = 0, priorityOrder_1 = priorityOrder; _i < priorityOrder_1.length; _i++) {
        var _a2 = priorityOrder_1[_i], rid = _a2.rid, factorsProvided = _a2.factorsProvided;
        var state_1 = _loop_1(rid, factorsProvided);
        if (typeof state_1 === "object") return state_1.value;
      }
      if (fallbackComponent !== void 0) {
        genericComponentOverrideContext.logDebugMessage(
          "Rendering ".concat(fallbackRid, " to cover ").concat(firstFactors, " as a fallback")
        );
        return fallbackComponent;
      }
      var enabledLoginMethods = [];
      if (firstFactors.includes(types.FactorIds.EMAILPASSWORD)) {
        enabledLoginMethods.push("emailpassword");
      }
      if (firstFactors.includes(types.FactorIds.THIRDPARTY)) {
        enabledLoginMethods.push("thirdparty");
      }
      if ([
        types.FactorIds.OTP_PHONE,
        types.FactorIds.OTP_EMAIL,
        types.FactorIds.LINK_PHONE,
        types.FactorIds.LINK_EMAIL
      ].some(function(pwlessFactorId) {
        return firstFactors.includes(pwlessFactorId);
      })) {
        enabledLoginMethods.push("passwordless");
      }
      genericComponentOverrideContext.logDebugMessage(
        "Choosing component using fallback logic w/ ".concat(enabledLoginMethods.join(", "), " enabled")
      );
      var enabledRecipeCount = enabledLoginMethods.length;
      var _loop_2 = function(rid2, includes2) {
        if (enabledRecipeCount === includes2.length && includes2.every(function(subRId) {
          return enabledLoginMethods.includes(subRId);
        })) {
          var matchingComp = routeComponents.find(function(comp) {
            return comp.recipeID === rid2;
          });
          if (matchingComp) {
            return { value: matchingComp };
          }
        }
      };
      for (var _b = 0, priorityOrder_2 = priorityOrder; _b < priorityOrder_2.length; _b++) {
        var _c = priorityOrder_2[_b], rid = _c.rid, includes = _c.includes;
        var state_2 = _loop_2(rid, includes);
        if (typeof state_2 === "object") return state_2.value;
      }
      var _loop_3 = function(rid2, includes2) {
        if (includes2.some(function(subRId) {
          return enabledLoginMethods.includes(subRId);
        })) {
          var matchingComp = routeComponents.find(function(comp) {
            return comp.recipeID === rid2;
          });
          if (matchingComp) {
            return { value: matchingComp };
          }
        }
      };
      for (var _d = 0, priorityOrder_3 = priorityOrder; _d < priorityOrder_3.length; _d++) {
        var _e = priorityOrder_3[_d], rid = _e.rid, includes = _e.includes;
        var state_3 = _loop_3(rid, includes);
        if (typeof state_3 === "object") return state_3.value;
      }
      throw new Error("No enabled recipes overlap with the requested firstFactors: " + firstFactors);
    }
    var RecipeRouter = (
      /** @class */
      function() {
        function RecipeRouter2() {
          var _this = this;
          this.getPathsToFeatureComponentWithRecipeIdMap = function() {
            if (_this.pathsToFeatureComponentWithRecipeIdMap !== void 0) {
              return _this.pathsToFeatureComponentWithRecipeIdMap;
            }
            var pathsToFeatureComponentWithRecipeIdMap = {};
            var features = _this.getFeatures();
            var featurePaths = Object.keys(features);
            for (var j = 0; j < featurePaths.length; j++) {
              var featurePath = featurePaths[j];
              if (pathsToFeatureComponentWithRecipeIdMap[featurePath] === void 0) {
                pathsToFeatureComponentWithRecipeIdMap[featurePath] = [];
              }
              pathsToFeatureComponentWithRecipeIdMap[featurePath].push(features[featurePath]);
            }
            _this.pathsToFeatureComponentWithRecipeIdMap = pathsToFeatureComponentWithRecipeIdMap;
            return _this.pathsToFeatureComponentWithRecipeIdMap;
          };
          this.requiresSignUpPage = false;
        }
        RecipeRouter2.getMatchingComponentForRouteAndRecipeIdFromPreBuiltUIList = function(normalisedUrl, preBuiltUIList, defaultToStaticList, dynamicLoginMethods) {
          var path = normalisedUrl.getAsStringDangerous();
          var isAuthPage = path === genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().appInfo.websiteBasePath.getAsStringDangerous();
          var routeComponents = preBuiltUIList.reduce(function(components, c) {
            var routes = c.getPathsToFeatureComponentWithRecipeIdMap();
            var _loop_4 = function(routePath2, routeComps2) {
              if (routePath2 === path || new RegExp("^" + routePath2.replace(/:\w+/g, "[^/]+").replace(/\/\*/g, "/[^/]+") + "$").test(path)) {
                components = components.concat(
                  routeComps2.map(function(c2) {
                    return { comp: c2, route: routePath2 };
                  })
                );
              }
            };
            for (var _i = 0, _a2 = Object.entries(routes); _i < _a2.length; _i++) {
              var _b = _a2[_i], routePath = _b[0], routeComps = _b[1];
              _loop_4(routePath, routeComps);
            }
            return components;
          }, []);
          var componentMatchingRid = routeComponents.find(function(c) {
            return c.comp.matches();
          });
          var defaultComp;
          if (routeComponents.length === 0) {
            defaultComp = void 0;
          } else if (componentMatchingRid !== void 0) {
            defaultComp = componentMatchingRid.comp;
          } else {
            defaultComp = routeComponents[0].comp;
          }
          var matchingNonAuthComponent = routeComponents.find(function(comp) {
            var ridlist = priorityOrder.map(function(a) {
              return a.rid;
            });
            return !ridlist.includes(comp.comp.recipeID) || comp.route !== genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().appInfo.websiteBasePath.getAsStringDangerous();
          });
          if (matchingNonAuthComponent) {
            return matchingNonAuthComponent.comp;
          }
          if (defaultToStaticList) {
            return defaultComp;
          }
          var mfaRecipe = recipe$1.MultiFactorAuth.getInstance();
          if (genericComponentOverrideContext.SuperTokens.usesDynamicLoginMethods === false) {
            if (componentMatchingRid) {
              return componentMatchingRid.comp;
            }
            if (isAuthPage && mfaRecipe && mfaRecipe.config.firstFactors !== void 0) {
              return chooseComponentBasedOnFirstFactors(
                mfaRecipe.config.firstFactors,
                routeComponents.map(function(c) {
                  return c.comp;
                })
              );
            } else {
              return defaultComp;
            }
          }
          if (dynamicLoginMethods === void 0) {
            throw new Error(
              "Should never come here: dynamic login methods info has not been loaded but recipeRouter rendered"
            );
          }
          if (componentMatchingRid && // if we find a component matching by rid
          (!priorityOrder.map(function(a) {
            return a.rid;
          }).includes(componentMatchingRid.comp.recipeID) || // from a non-auth recipe
          priorityOrder.some(function(a) {
            return a.rid === componentMatchingRid.comp.recipeID && a.factorsProvided.some(function(factorId) {
              return dynamicLoginMethods.firstFactors.includes(factorId);
            });
          }))) {
            return componentMatchingRid.comp;
          }
          if (isAuthPage) {
            return chooseComponentBasedOnFirstFactors(
              dynamicLoginMethods.firstFactors,
              routeComponents.map(function(c) {
                return c.comp;
              })
            );
          }
          return void 0;
        };
        return RecipeRouter2;
      }()
    );
    function RoutingComponent(props) {
      var _a2, _b;
      var userContext = useUserContext();
      var rethrowInRender = genericComponentOverrideContext.useRethrowInRender();
      var _c = React.useState(void 0), loadedDynamicLoginMethods = _c[0], setLoadedDynamicLoginMethods = _c[1];
      var navigate = (_a2 = props.getReactRouterDomWithCustomHistory()) === null || _a2 === void 0 ? void 0 : _a2.useHistoryCustom();
      var path = props.path;
      var isAuthPage = path === genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().appInfo.websiteBasePath.getAsStringDangerous();
      var location = (_b = props.getReactRouterDomWithCustomHistory()) === null || _b === void 0 ? void 0 : _b.useLocation();
      var componentToRender = React__default.default.useMemo(
        function() {
          if (isAuthPage) {
            return;
          }
          var normalizedPath = new NormalisedURLPath__default.default(path);
          if (loadedDynamicLoginMethods !== void 0 || genericComponentOverrideContext.SuperTokens.usesDynamicLoginMethods === false) {
            var result = RecipeRouter.getMatchingComponentForRouteAndRecipeIdFromPreBuiltUIList(
              normalizedPath,
              props.preBuiltUIList,
              false,
              loadedDynamicLoginMethods
            );
            if (result === void 0 && genericComponentOverrideContext.SuperTokens.usesDynamicLoginMethods === true) {
              void redirectToAuth({ navigate, redirectBack: false });
            }
            return result;
          }
          return void 0;
        },
        [path, location, loadedDynamicLoginMethods, props.preBuiltUIList]
      );
      React.useEffect(
        function() {
          if (loadedDynamicLoginMethods) {
            return;
          }
          genericComponentOverrideContext.Multitenancy.getInstanceOrThrow().getCurrentDynamicLoginMethods({ userContext }).then(
            function(loginMethods) {
              return setLoadedDynamicLoginMethods(loginMethods);
            },
            function(err) {
              return rethrowInRender(err);
            }
          );
        },
        [loadedDynamicLoginMethods, setLoadedDynamicLoginMethods]
      );
      if (isAuthPage) {
        return jsxRuntime.jsx(AuthPageWrapper, {
          preBuiltUIList: props.preBuiltUIList,
          navigate,
          useSignUpStateFromQueryString: true
        });
      }
      if (genericComponentOverrideContext.SuperTokens.usesDynamicLoginMethods && loadedDynamicLoginMethods === void 0) {
        return jsxRuntime.jsx(DynamicLoginMethodsSpinner, {});
      }
      if (componentToRender === void 0 || loadedDynamicLoginMethods === void 0 && genericComponentOverrideContext.SuperTokens.usesDynamicLoginMethods) {
        return null;
      }
      return jsxRuntime.jsx(componentToRender.component, { navigate });
    }
    function getSuperTokensRoutesForReactRouterDom$1(_a2) {
      var getReactRouterDomWithCustomHistory = _a2.getReactRouterDomWithCustomHistory, recipeList = _a2.recipeList, basePath = _a2.basePath;
      var routerInfo = getReactRouterDomWithCustomHistory();
      if (routerInfo === void 0) {
        return [];
      }
      var Route = routerInfo.router.Route;
      var routes = Object.values(
        recipeList.reduce(function(routes2, recipe2) {
          var pathsToFeatureComponentWithRecipeIdMap = recipe2.getPathsToFeatureComponentWithRecipeIdMap();
          Object.keys(pathsToFeatureComponentWithRecipeIdMap).forEach(function(path2) {
            path2 = path2 === "" ? "/" : path2;
            var pathForRouter = getPathForRouter$1(basePath, path2);
            if (!(path2 in routes2)) {
              routes2[path2] = jsxRuntime.jsx(
                Route,
                genericComponentOverrideContext.__assign(
                  { exact: true, path: pathForRouter },
                  {
                    children: jsxRuntime.jsx(RoutingComponent, {
                      getReactRouterDomWithCustomHistory,
                      preBuiltUIList: recipeList,
                      path: path2
                    })
                  }
                ),
                "st-".concat(path2)
              );
            }
          });
          return routes2;
        }, {})
      );
      if (!genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().disableAuthRoute && recipeList.some(function(ui) {
        return ui.getAuthComponents().length !== 0;
      })) {
        var path = genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().appInfo.websiteBasePath.appendPath(new NormalisedURLPath__default$1.default("/")).getAsStringDangerous();
        routes.push(
          jsxRuntime.jsx(
            Route,
            genericComponentOverrideContext.__assign(
              { exact: true, path: getPathForRouter$1(basePath, path) },
              {
                children: jsxRuntime.jsx(RoutingComponent, {
                  getReactRouterDomWithCustomHistory,
                  preBuiltUIList: recipeList,
                  path
                })
              }
            ),
            "st-/auth"
          )
        );
      }
      return routes;
    }
    function getPathForRouter$1(basePath, path) {
      var pathForRouter = path;
      if (basePath !== void 0) {
        if (pathForRouter.startsWith(basePath)) {
          pathForRouter = pathForRouter.slice(basePath.length);
          if (!pathForRouter.startsWith("/")) {
            pathForRouter = "/" + pathForRouter;
          }
        } else {
          throw new Error("basePath has to be a prefix of websiteBasePath passed to SuperTokens.init");
        }
      }
      return pathForRouter;
    }
    function getSuperTokensRoutesForReactRouterDomV6(_a2) {
      var getReactRouterDomWithCustomHistory = _a2.getReactRouterDomWithCustomHistory, recipeList = _a2.recipeList, basePath = _a2.basePath;
      var routerInfo = getReactRouterDomWithCustomHistory();
      if (routerInfo === void 0) {
        return [];
      }
      var Route = routerInfo.router.Route;
      var routes = Object.values(
        recipeList.reduce(function(routes2, recipe2) {
          var pathsToFeatureComponentWithRecipeIdMap = recipe2.getPathsToFeatureComponentWithRecipeIdMap();
          Object.keys(pathsToFeatureComponentWithRecipeIdMap).forEach(function(path2) {
            path2 = path2 === "" ? "/" : path2;
            var pathForRouter = getPathForRouter(basePath, path2);
            if (!(path2 in routes2)) {
              routes2[path2] = jsxRuntime.jsx(
                Route,
                {
                  path: pathForRouter,
                  element: jsxRuntime.jsx(RoutingComponent, {
                    getReactRouterDomWithCustomHistory,
                    preBuiltUIList: recipeList,
                    path: path2
                  })
                },
                "st-".concat(path2)
              );
            }
          });
          return routes2;
        }, {})
      );
      if (!genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().disableAuthRoute && recipeList.some(function(ui) {
        return ui.getAuthComponents().length !== 0;
      })) {
        var path = genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().appInfo.websiteBasePath.appendPath(new NormalisedURLPath__default$1.default("/")).getAsStringDangerous();
        routes.push(
          jsxRuntime.jsx(
            Route,
            {
              path: getPathForRouter(basePath, path),
              element: jsxRuntime.jsx(RoutingComponent, {
                getReactRouterDomWithCustomHistory,
                preBuiltUIList: recipeList,
                path
              })
            },
            "st-/auth"
          )
        );
      }
      return routes;
    }
    function getPathForRouter(basePath, path) {
      if (basePath !== void 0) {
        if (path.startsWith(basePath)) {
          path = path.slice(basePath.length);
          if (!path.startsWith("/")) {
            path = "/" + path;
          }
        } else {
          throw new Error("basePath has to be a prefix of websiteBasePath passed to SuperTokens.init");
        }
      }
      return path;
    }
    var UI = (
      /** @class */
      function() {
        function UI2() {
        }
        UI2.getSuperTokensRoutesForReactRouterDom = function(reactRouterDom, preBuiltUiClassList, basePath) {
          if (preBuiltUiClassList === void 0) {
            preBuiltUiClassList = [];
          }
          if (reactRouterDom === void 0 || preBuiltUiClassList.length === 0) {
            throw new Error(
              // eslint-disable-next-line @typescript-eslint/quotes
              'Please use getSuperTokensRoutesForReactRouterDom like getSuperTokensRoutesForReactRouterDom(require("react-router-dom"), [EmailPasswordPreBuiltUI]) in your render function'
            );
          }
          var recipeList = preBuiltUiClassList.map(function(r) {
            return r.getInstanceOrInitAndGetInstance();
          });
          if (UI2.reactRouterDomIsV6 === void 0) {
            UI2.reactRouterDomIsV6 = reactRouterDom.withRouter === void 0;
          }
          if (UI2.reactRouterDomIsV6) {
            if (UI2.reactRouterDom === void 0) {
              var useNavigateHookForRRDV6 = function() {
                var navigateHook = reactRouterDom.useNavigate();
                var _a2 = React__default.default.useState(void 0), to = _a2[0], setTo = _a2[1];
                React__default.default.useEffect(
                  function() {
                    if (to !== void 0) {
                      setTo(void 0);
                      navigateHook(to);
                    }
                  },
                  [to, navigateHook, setTo]
                );
                return setTo;
              };
              UI2.reactRouterDom = {
                router: reactRouterDom,
                useHistoryCustom: useNavigateHookForRRDV6,
                useLocation: reactRouterDom.useLocation
              };
            }
            return getSuperTokensRoutesForReactRouterDomV6({
              getReactRouterDomWithCustomHistory: UI2.getReactRouterDomWithCustomHistory,
              recipeList,
              basePath
            });
          }
          if (UI2.reactRouterDom === void 0) {
            UI2.reactRouterDom = {
              router: reactRouterDom,
              useHistoryCustom: reactRouterDom.useHistory,
              useLocation: reactRouterDom.useLocation
            };
          }
          return getSuperTokensRoutesForReactRouterDom$1({
            getReactRouterDomWithCustomHistory: UI2.getReactRouterDomWithCustomHistory,
            recipeList,
            basePath
          });
        };
        UI2.canHandleRoute = function(preBuiltUiClassList) {
          var recipeList = preBuiltUiClassList.map(function(r) {
            return r.getInstanceOrInitAndGetInstance();
          });
          var path = genericComponentOverrideContext.getCurrentNormalisedUrlPath().getAsStringDangerous();
          var isAuthPage = path === genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().appInfo.websiteBasePath.getAsStringDangerous();
          if (isAuthPage) {
            return !genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().disableAuthRoute;
          }
          return RecipeRouter.getMatchingComponentForRouteAndRecipeIdFromPreBuiltUIList(
            genericComponentOverrideContext.getCurrentNormalisedUrlPath(),
            recipeList,
            true
          ) !== void 0;
        };
        UI2.getRoutingComponent = function(preBuiltUiClassList) {
          var recipeList = preBuiltUiClassList.map(function(r) {
            return r.getInstanceOrInitAndGetInstance();
          });
          return jsxRuntime.jsx(RoutingComponent, {
            getReactRouterDomWithCustomHistory: UI2.getReactRouterDomWithCustomHistory,
            path: genericComponentOverrideContext.getCurrentNormalisedUrlPath().getAsStringDangerous(),
            preBuiltUIList: recipeList
          });
        };
        UI2.getReactRouterDomWithCustomHistory = function() {
          return UI2.reactRouterDom;
        };
        UI2.AuthPage = function(props) {
          return jsxRuntime.jsx(
            AuthPageWrapper,
            genericComponentOverrideContext.__assign({}, props, {
              preBuiltUIList: props.preBuiltUIList.map(function(r) {
                return r.getInstanceOrInitAndGetInstance();
              })
            })
          );
        };
        UI2.AuthPageTheme = AuthPageTheme;
        UI2.AuthPageFooter = AuthPageFooter;
        UI2.AuthPageHeader = AuthPageHeader;
        UI2.AuthPageComponentList = AuthPageComponentList;
        UI2.AuthRecipeComponentsOverrideContextProvider = Provider;
        return UI2;
      }()
    );
    var getSuperTokensRoutesForReactRouterDom = UI.getSuperTokensRoutesForReactRouterDom;
    var canHandleRoute = UI.canHandleRoute;
    var getRoutingComponent = UI.getRoutingComponent;
    var AuthPage = UI.AuthPage;
    var SessionAuth = function(_a2) {
      var _b;
      var children = _a2.children, props = genericComponentOverrideContext.__rest(_a2, ["children"]);
      var requireAuth = React.useRef(props.requireAuth);
      if (props.requireAuth !== requireAuth.current) {
        throw new Error(
          // eslint-disable-next-line @typescript-eslint/quotes
          'requireAuth prop should not change. If you are seeing this, it probably means that you are using SessionAuth in multiple routes with different values for requireAuth. To solve this, try adding the "key" prop to all uses of SessionAuth like <SessionAuth key="someUniqueKeyPerRoute" requireAuth={...}>'
        );
      }
      var _c = React.useState({ loading: true }), context = _c[0], setContext = _c[1];
      var setContextIfChanged = React.useCallback(
        function(newValue) {
          setContext(function(oldValue) {
            if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {
              return newValue;
            }
            return oldValue;
          });
        },
        [setContext]
      );
      var session = React.useRef();
      var navigateHookRef = React.useRef(
        (_b = UI.getReactRouterDomWithCustomHistory()) === null || _b === void 0 ? void 0 : _b.useHistoryCustom
      );
      var navigate;
      try {
        if (navigateHookRef.current) {
          navigate = navigateHookRef.current();
        }
      } catch (_d) {
      }
      var userContext = useUserContext();
      var rethrowInRender = genericComponentOverrideContext.useRethrowInRender();
      var redirectToLogin = React.useCallback(function() {
        void genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().redirectToAuth({
          navigate,
          userContext,
          redirectBack: true
        });
      }, []);
      var buildContext = React.useCallback(function() {
        return genericComponentOverrideContext.__awaiter(void 0, void 0, void 0, function() {
          var sessionExists, invalidClaims, err_1, err_2;
          var _a3;
          return genericComponentOverrideContext.__generator(this, function(_b2) {
            switch (_b2.label) {
              case 0:
                if (session.current === void 0) {
                  session.current = types.Session.getInstanceOrThrow();
                }
                return [
                  4,
                  session.current.doesSessionExist({
                    userContext
                  })
                ];
              case 1:
                sessionExists = _b2.sent();
                if (sessionExists === false) {
                  return [
                    2,
                    {
                      loading: false,
                      doesSessionExist: false,
                      accessTokenPayload: {},
                      invalidClaims: [],
                      userId: ""
                    }
                  ];
                }
                _b2.label = 2;
              case 2:
                _b2.trys.push([2, 4, , 6]);
                return [
                  4,
                  session.current.validateClaims({
                    overrideGlobalClaimValidators: props.overrideGlobalClaimValidators,
                    userContext
                  })
                ];
              case 3:
                invalidClaims = _b2.sent();
                return [3, 6];
              case 4:
                err_1 = _b2.sent();
                return [
                  4,
                  session.current.doesSessionExist({
                    userContext
                  })
                ];
              case 5:
                if (_b2.sent()) {
                  throw err_1;
                }
                return [
                  2,
                  {
                    loading: false,
                    doesSessionExist: false,
                    accessTokenPayload: {},
                    invalidClaims: [],
                    userId: ""
                  }
                ];
              case 6:
                _b2.trys.push([6, 9, , 11]);
                _a3 = {
                  loading: false,
                  doesSessionExist: true,
                  invalidClaims
                };
                return [
                  4,
                  session.current.getAccessTokenPayloadSecurely({
                    userContext
                  })
                ];
              case 7:
                _a3.accessTokenPayload = _b2.sent();
                return [
                  4,
                  session.current.getUserId({
                    userContext
                  })
                ];
              case 8:
                return [2, (_a3.userId = _b2.sent(), _a3)];
              case 9:
                err_2 = _b2.sent();
                return [
                  4,
                  session.current.doesSessionExist({
                    userContext
                  })
                ];
              case 10:
                if (_b2.sent()) {
                  throw err_2;
                }
                return [
                  2,
                  {
                    loading: false,
                    doesSessionExist: false,
                    accessTokenPayload: {},
                    invalidClaims: [],
                    userId: ""
                  }
                ];
              case 11:
                return [
                  2
                  /*return*/
                ];
            }
          });
        });
      }, []);
      var setInitialContextAndMaybeRedirect = React.useCallback(
        function(toSetContext) {
          return genericComponentOverrideContext.__awaiter(void 0, void 0, void 0, function() {
            var failureRedirectInfo, err_3;
            return genericComponentOverrideContext.__generator(this, function(_a3) {
              switch (_a3.label) {
                case 0:
                  if (context.loading === false) {
                    return [
                      2
                      /*return*/
                    ];
                  }
                  if (!(props.doRedirection !== false)) return [3, 8];
                  if (!toSetContext.doesSessionExist && props.requireAuth !== false) {
                    redirectToLogin();
                    return [
                      2
                      /*return*/
                    ];
                  }
                  if (!(toSetContext.invalidClaims.length !== 0)) return [3, 8];
                  failureRedirectInfo = void 0;
                  _a3.label = 1;
                case 1:
                  _a3.trys.push([1, 6, , 7]);
                  return [
                    4,
                    types.getFailureRedirectionInfo({
                      invalidClaims: toSetContext.invalidClaims,
                      overrideGlobalClaimValidators: props.overrideGlobalClaimValidators,
                      userContext
                    })
                  ];
                case 2:
                  failureRedirectInfo = _a3.sent();
                  if (!(failureRedirectInfo.redirectPath !== void 0)) return [3, 5];
                  if (!types.validateAndCompareOnFailureRedirectionURLToCurrent(
                    failureRedirectInfo.redirectPath
                  ))
                    return [3, 3];
                  setContextIfChanged(toSetContext);
                  return [
                    2
                    /*return*/
                  ];
                case 3:
                  return [
                    4,
                    genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().redirectToUrl(
                      failureRedirectInfo.redirectPath,
                      navigate
                    )
                  ];
                case 4:
                  return [2, _a3.sent()];
                case 5:
                  return [3, 7];
                case 6:
                  err_3 = _a3.sent();
                  rethrowInRender(err_3);
                  throw err_3;
                case 7:
                  if (props.accessDeniedScreen !== void 0 && failureRedirectInfo.failedClaim !== void 0) {
                    console.warn({
                      message: "Showing access denied screen because a claim validator failed",
                      claimValidationError: failureRedirectInfo.failedClaim
                    });
                    return [
                      2,
                      setContextIfChanged(
                        genericComponentOverrideContext.__assign(
                          genericComponentOverrideContext.__assign({}, toSetContext),
                          { accessDeniedValidatorError: failureRedirectInfo.failedClaim }
                        )
                      )
                    ];
                  }
                  _a3.label = 8;
                case 8:
                  setContextIfChanged(toSetContext);
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        },
        [
          context.loading,
          props.doRedirection,
          props.requireAuth,
          props.overrideGlobalClaimValidators,
          props.accessDeniedScreen,
          redirectToLogin,
          userContext,
          navigate
        ]
      );
      genericComponentOverrideContext.useOnMountAPICall(buildContext, setInitialContextAndMaybeRedirect);
      React.useEffect(
        function() {
          function onHandleEvent(event) {
            return genericComponentOverrideContext.__awaiter(this, void 0, void 0, function() {
              var _a3, invalidClaims, failureRedirectInfo, err_4;
              return genericComponentOverrideContext.__generator(this, function(_b2) {
                switch (_b2.label) {
                  case 0:
                    _a3 = event.action;
                    switch (_a3) {
                      case "SESSION_CREATED":
                        return [3, 1];
                      case "REFRESH_SESSION":
                        return [3, 1];
                      case "ACCESS_TOKEN_PAYLOAD_UPDATED":
                        return [3, 1];
                      case "API_INVALID_CLAIM":
                        return [3, 1];
                      case "SIGN_OUT":
                        return [3, 11];
                      case "UNAUTHORISED":
                        return [3, 12];
                    }
                    return [3, 13];
                  case 1:
                    return [
                      4,
                      session.current.validateClaims({
                        overrideGlobalClaimValidators: props.overrideGlobalClaimValidators,
                        userContext
                      })
                    ];
                  case 2:
                    invalidClaims = _b2.sent();
                    if (!(props.doRedirection !== false)) return [3, 10];
                    failureRedirectInfo = void 0;
                    _b2.label = 3;
                  case 3:
                    _b2.trys.push([3, 8, , 9]);
                    return [
                      4,
                      types.getFailureRedirectionInfo({
                        invalidClaims,
                        overrideGlobalClaimValidators: props.overrideGlobalClaimValidators,
                        userContext
                      })
                    ];
                  case 4:
                    failureRedirectInfo = _b2.sent();
                    if (!failureRedirectInfo.redirectPath) return [3, 7];
                    if (!types.validateAndCompareOnFailureRedirectionURLToCurrent(
                      failureRedirectInfo.redirectPath
                    ))
                      return [3, 5];
                    setContextIfChanged(
                      genericComponentOverrideContext.__assign(
                        genericComponentOverrideContext.__assign({}, event.sessionContext),
                        { loading: false, invalidClaims }
                      )
                    );
                    return [3, 7];
                  case 5:
                    return [
                      4,
                      genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().redirectToUrl(
                        failureRedirectInfo.redirectPath,
                        navigate
                      )
                    ];
                  case 6:
                    return [2, _b2.sent()];
                  case 7:
                    return [3, 9];
                  case 8:
                    err_4 = _b2.sent();
                    rethrowInRender(err_4);
                    throw err_4;
                  case 9:
                    if (props.accessDeniedScreen !== void 0 && failureRedirectInfo.failedClaim !== void 0) {
                      console.warn({
                        message: "Showing access denied screen because a claim validator failed",
                        claimValidationError: failureRedirectInfo.failedClaim
                      });
                      return [
                        2,
                        setContextIfChanged(
                          genericComponentOverrideContext.__assign(
                            genericComponentOverrideContext.__assign({}, event.sessionContext),
                            {
                              loading: false,
                              invalidClaims,
                              accessDeniedValidatorError: failureRedirectInfo.failedClaim
                            }
                          )
                        )
                      ];
                    }
                    _b2.label = 10;
                  case 10:
                    setContextIfChanged(
                      genericComponentOverrideContext.__assign(
                        genericComponentOverrideContext.__assign({}, event.sessionContext),
                        { loading: false, invalidClaims }
                      )
                    );
                    return [
                      2
                      /*return*/
                    ];
                  case 11:
                    setContextIfChanged(
                      genericComponentOverrideContext.__assign(
                        genericComponentOverrideContext.__assign({}, event.sessionContext),
                        { loading: false, invalidClaims: [] }
                      )
                    );
                    return [
                      2
                      /*return*/
                    ];
                  case 12:
                    setContextIfChanged(
                      genericComponentOverrideContext.__assign(
                        genericComponentOverrideContext.__assign({}, event.sessionContext),
                        { loading: false, invalidClaims: [] }
                      )
                    );
                    if (props.onSessionExpired !== void 0) {
                      props.onSessionExpired();
                    } else if (props.requireAuth !== false && props.doRedirection !== false) {
                      redirectToLogin();
                    }
                    return [
                      2
                      /*return*/
                    ];
                  case 13:
                    return [
                      2
                      /*return*/
                    ];
                }
              });
            });
          }
          if (session.current === void 0) {
            session.current = types.Session.getInstanceOrThrow();
          }
          if (context.loading === false) {
            return session.current.addEventListener(onHandleEvent);
          }
          return void 0;
        },
        [props, setContextIfChanged, context.loading, userContext, navigate, redirectToLogin]
      );
      if (props.requireAuth !== false && (context.loading || !context.doesSessionExist)) {
        return null;
      }
      if (!context.loading && context.accessDeniedValidatorError && props.accessDeniedScreen) {
        return jsxRuntime.jsx(props.accessDeniedScreen, {
          userContext,
          navigate,
          validationError: context.accessDeniedValidatorError
        });
      }
      return jsxRuntime.jsx(
        SessionContext.Provider,
        genericComponentOverrideContext.__assign({ value: context }, { children })
      );
    };
    var SessionAuthWrapper = function(props) {
      return jsxRuntime.jsx(
        UserContextWrapper,
        genericComponentOverrideContext.__assign(
          { userContext: props.userContext },
          { children: jsxRuntime.jsx(SessionAuth, genericComponentOverrideContext.__assign({}, props)) }
        )
      );
    };
    var SuperTokensWrapper = function(props) {
      return jsxRuntime.jsx(
        SessionAuthWrapper,
        genericComponentOverrideContext.__assign({}, props, { requireAuth: false, doRedirection: false })
      );
    };
    var SuperTokensAPIWrapper = (
      /** @class */
      function() {
        function SuperTokensAPIWrapper2() {
        }
        SuperTokensAPIWrapper2.init = function(config) {
          genericComponentOverrideContext.SuperTokens.init(config);
        };
        SuperTokensAPIWrapper2.changeLanguage = function(language) {
          return genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().changeLanguage(language);
        };
        SuperTokensAPIWrapper2.loadTranslation = function(store) {
          return genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().loadTranslation(store);
        };
        var _a2;
        _a2 = SuperTokensAPIWrapper2;
        SuperTokensAPIWrapper2.SuperTokensWrapper = SuperTokensWrapper;
        SuperTokensAPIWrapper2.redirectToAuth = function(options) {
          return genericComponentOverrideContext.__awaiter(void 0, void 0, void 0, function() {
            var _b;
            return genericComponentOverrideContext.__generator(_a2, function(_c) {
              return [
                2,
                genericComponentOverrideContext.SuperTokens.getInstanceOrThrow().redirectToAuth(
                  genericComponentOverrideContext.__assign(
                    genericComponentOverrideContext.__assign({}, options),
                    {
                      redirectBack: (_b = options === null || options === void 0 ? void 0 : options.redirectBack) !== null && _b !== void 0 ? _b : true,
                      userContext: genericComponentOverrideContext.getNormalisedUserContext(
                        options === null || options === void 0 ? void 0 : options.userContext
                      )
                    }
                  )
                )
              ];
            });
          });
        };
        SuperTokensAPIWrapper2.useTranslation = translationContext.useTranslation;
        SuperTokensAPIWrapper2.useUserContext = useUserContext;
        return SuperTokensAPIWrapper2;
      }()
    );
    var init = SuperTokensAPIWrapper.init;
    var changeLanguage = SuperTokensAPIWrapper.changeLanguage;
    var loadTranslation = SuperTokensAPIWrapper.loadTranslation;
    var redirectToAuth = SuperTokensAPIWrapper.redirectToAuth;
    exports.AuthPage = AuthPage;
    exports.AuthPageComponentList = AuthPageComponentList;
    exports.AuthPageFooter = AuthPageFooter;
    exports.AuthPageHeader = AuthPageHeader;
    exports.AuthPageTheme = AuthPageTheme;
    exports.BackButton = BackButton;
    exports.ComponentOverrideContext = ComponentOverrideContext;
    exports.DynamicLoginMethodsSpinner = DynamicLoginMethodsSpinner;
    exports.FeatureWrapper = FeatureWrapper;
    exports.GeneralError = GeneralError;
    exports.Provider = Provider;
    exports.RecipeRouter = RecipeRouter;
    exports.SessionAuthWrapper = SessionAuthWrapper;
    exports.SessionContext = SessionContext;
    exports.SpinnerIcon = SpinnerIcon;
    exports.SuperTokensAPIWrapper = SuperTokensAPIWrapper;
    exports.SuperTokensBranding = SuperTokensBranding;
    exports.SuperTokensWrapper = SuperTokensWrapper;
    exports.UI = UI;
    exports.UserContextContext = UserContextContext;
    exports.UserContextWrapper = UserContextWrapper;
    exports.canHandleRoute = canHandleRoute;
    exports.changeLanguage = changeLanguage;
    exports.defaultTranslationsCommon = defaultTranslationsCommon;
    exports.getRoutingComponent = getRoutingComponent;
    exports.getSuperTokensRoutesForReactRouterDom = getSuperTokensRoutesForReactRouterDom;
    exports.init = init;
    exports.loadTranslation = loadTranslation;
    exports.redirectToAuth = redirectToAuth;
    exports.useDynamicLoginMethods = useDynamicLoginMethods;
    exports.useSessionContext = useSessionContext;
    exports.useUserContext = useUserContext;
    exports.withOverride = withOverride;
  }
});

export {
  require_translationContext,
  require_multitenancy_shared,
  require_multifactorauth2 as require_multifactorauth,
  require_sessionClaimValidatorStore3 as require_sessionClaimValidatorStore,
  require_sessionClaimValidatorStore4 as require_sessionClaimValidatorStore2,
  require_multifactorauth_shared2,
  require_index2
};
//# sourceMappingURL=chunk-2LZGK6WB.js.map
