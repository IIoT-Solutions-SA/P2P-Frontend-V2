version: '3.8'

services:
  # PostgreSQL - Our main database for structured data
  postgres:
    image: postgres:15-alpine
    container_name: p2p-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-p2p_sandbox}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      # - ./docker/scripts/init-postgres.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - p2p-network

  # MongoDB - For document storage (forum posts, use cases)
  mongodb:
    image: mongo:7
    container_name: p2p-mongodb
    environment:
      MONGO_INITDB_DATABASE: ${MONGO_DB_NAME:-p2p_sandbox}
    volumes:
      - mongo_data:/data/db
      # - ./docker/scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - p2p-network


  # SuperTokens - Authentication service
  # KNOWN ISSUE: Health check disabled due to missing curl/nc/wget tools in container
  # Service works correctly but health check fails - needs proper fix in future
  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:11.0
    container_name: p2p-supertokens
    environment:
      POSTGRESQL_CONNECTION_URI: "postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/supertokens"
    ports:
      - "3567:3567"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - p2p-network
    # TODO: Fix health check - container lacks curl/nc/wget tools
    # healthcheck:
    #   test: ["CMD", "sh", "-c", "exec 3<>/dev/tcp/localhost/3567 && echo 'OK' >&3 && cat <&3"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  # FastAPI Backend
  backend:
    build:
      context: ./p2p-backend-app
      dockerfile: Dockerfile.dev
    container_name: p2p-backend
    volumes:
      - ./p2p-backend-app:/app
      - /app/__pycache__
      - /app/.pytest_cache
      - file_storage:/app/storage
    ports:
      - "8000:8000"
      - "5678:5678"  # For debugging
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-p2p_sandbox}
      - MONGODB_URL=mongodb://mongodb:27017/${MONGO_DB_NAME:-p2p_sandbox}
      - SUPERTOKENS_CONNECTION_URI=http://supertokens:3567
      - BACKEND_CORS_ORIGINS=http://localhost:5173,http://frontend:5173,http://localhost:3000
      - PYTHONUNBUFFERED=1
      - DEBUG=${DEBUG:-True}
      - API_DOMAIN=http://localhost:8000
      - WEBSITE_DOMAIN=http://localhost:5173
    depends_on:
      postgres:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      supertokens:
        condition: service_started
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - p2p-network

  # React Frontend
  frontend:
    build:
      context: ./p2p-frontend-app
      dockerfile: Dockerfile.dev
    container_name: p2p-frontend
    volumes:
      - ./p2p-frontend-app:/app
      - /app/node_modules  # Anonymous volume for node_modules
    ports:
      - "5173:5173"
    environment:
      # Use backend service name for internal Docker network communication
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000}
      - VITE_SUPERTOKENS_API_DOMAIN=${VITE_SUPERTOKENS_API_DOMAIN:-http://localhost:8000}
      - VITE_SUPERTOKENS_API_BASE_PATH=/auth
      - VITE_WEBSITE_DOMAIN=${VITE_WEBSITE_DOMAIN:-http://localhost:5173}
      - VITE_APP_NAME=P2P Sandbox
      - VITE_DEBUG_MODE=${VITE_DEBUG_MODE:-true}
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true  # For hot reload on Windows/Mac
    depends_on:
      - backend
    networks:
      - p2p-network

volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  file_storage:
    driver: local

networks:
  p2p-network:
    driver: bridge
    name: p2p-network